{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "\u2764\ufe0f \u8f6c\u8f7d\u6587\u7ae0\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u8c22\u8c22\uff01\u2764\ufe0f", "showPostSource": 1, "iconList": {"add": "M8 1C8.4 1 8.7 1.3 8.7 1.7V7.3H14.3C14.7 7.3 15 7.6 15 8C15 8.4 14.7 8.7 14.3 8.7H8.7V14.3C8.7 14.7 8.4 15 8 15C7.6 15 7.3 14.7 7.3 14.3V8.7H1.7C1.3 8.7 1 8.4 1 8C1 7.6 1.3 7.3 1.7 7.3H7.3V1.7C7.3 1.3 7.6 1 8 1Z"}, "UTC": 8, "rssSplit": "sentence", "exlink": {"add": "https://github.com/tcq20256/feeday/issues/new"}, "needComment": 1, "allHead": "<script src='/gmeek/GmeekVercount.js'></script>", "title": "feeday", "subTitle": "BB Work No Money", "homeUrl": "https://feeday.cn", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/chuang-jian-bo-ke.html", "labels": ["blog"], "postTitle": "\u521b\u5efa\u535a\u5ba2", "postUrl": "post/chuang-jian-bo-ke.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/1", "commentNum": 0, "wordCount": 6333, "description": "## \u5b89\u88c5\u6b65\u9aa4\n\n1. \u3010\u521b\u5efa\u4ed3\u5e93\u3011\u70b9\u51fb[\u901a\u8fc7\u6a21\u677f\u521b\u5efa\u4ed3\u5e93](https://github.com/new?template_name=Gmeek-template&template_owner=Meekdai)\uff0c\u5efa\u8bae\u4ed3\u5e93\u540d\u79f0\u4e3a`XXX.github.io`\uff0c\u5176\u4e2d`XXX`\u4e3a\u4f60\u7684github\u7528\u6237\u540d\u3002", "top": 0, "createdAt": 1752947450, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style><style>.markdown-alert.markdown-alert-caution {border-left-color:var(--borderColor-danger-emphasis, var(--color-danger-emphasis));background-color:var(--color-danger-subtle);}.markdown-alert.markdown-alert-caution .markdown-alert-title {color: var(--fgColor-danger,var(--color-danger-fg));}</style>", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P2": {"htmlDir": "docs/post/NextChat.html", "labels": ["blog"], "postTitle": "NextChat", "postUrl": "post/NextChat.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/2", "commentNum": 0, "wordCount": 3139, "description": "\n\n\u2728 Light and Fast AI Assistant,with Claude, DeepSeek, GPT4 & Gemini Pro support. \n\n\n[NextChatAI](https://nextchat.club?utm_source=readme) / [Web App Demo](https://app.nextchat.dev) / [Desktop App](https://github.com/Yidadaa/ChatGPT-Next-Web/releases) / [Discord](https://discord.gg/YCkeafCafC) / [Enterprise Edition](#enterprise-edition) / [Twitter](https://twitter.com/NextChatDev)\n\n\n[saas-url]: https://nextchat.club?utm_source=readme\n[saas-image]: https://img.shields.io/badge/NextChat-Saas-green?logo=microsoftedge\n[web-url]: https://app.nextchat.dev/\n[download-url]: https://github.com/Yidadaa/ChatGPT-Next-Web/releases\n[Web-image]: https://img.shields.io/badge/Web-PWA-orange?logo=microsoftedge\n[Windows-image]: https://img.shields.io/badge/-Windows-blue?logo=windows\n[MacOS-image]: https://img.shields.io/badge/-MacOS-black?logo=apple\n[Linux-image]: https://img.shields.io/badge/-Linux-333?logo=ubuntu\n\n[<img src='https://zeabur.com/button.svg' alt='Deploy on Zeabur' height='30'>](https://zeabur.com/templates/ZBUEFA) [<img src='https://vercel.com/button' alt='Deploy on Vercel' height='30'>](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FChatGPTNextWeb%2FChatGPT-Next-Web&env=OPENAI_API_KEY&env=CODE&project-name=nextchat&repository-name=NextChat)  [<img src='https://gitpod.io/button/open-in-gitpod.svg' alt='Open in Gitpod' height='30'>](https://gitpod.io/#https://github.com/ChatGPTNextWeb/NextChat) \n\n[<img src='https://github.com/user-attachments/assets/903482d4-3e87-4134-9af1-f2588fa90659' height='50' width='' >](https://monica.im/?utm=nxcrp)\n\n\n\n## Dokploy\n\nDokploy \u662f\u4e00\u4e2a\u514d\u8d39\u7684\u3001\u53ef\u81ea\u6258\u7ba1\u7684\u5e73\u53f0\u5373\u670d\u52a1 \uff08PaaS\uff09\uff0c\u53ef\u7b80\u5316\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u7684\u90e8\u7f72\u548c\u7ba1\u7406\u3002", "top": 0, "createdAt": 1752958058, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P3": {"htmlDir": "docs/post/cha-zhao-dai-ma.html", "labels": ["documentation"], "postTitle": "\u67e5\u627e\u4ee3\u7801", "postUrl": "post/cha-zhao-dai-ma.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/3", "commentNum": 0, "wordCount": 366, "description": "## Windows \u67e5\u627e\n```\nGet-ChildItem -Recurse -File | Select-String -Pattern '56'\n```\n## Bash \u67e5\u627e\n\u641c\u7d22\u5339\u914d\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u6253\u5370\u663e\u793a\u884c\u53f7\n```\ngrep -rn 'Money' *\n```\n\u641c\u7d22\u591a\u4e2a\u6587\u4ef6\u5e76\u67e5\u627e\u5339\u914d\u6587\u672c\u5728\u54ea\u4e9b\u6587\u4ef6\u4e2d\uff1a\n```\ngrep -l 'Money' file1 file2 file3...\n```\n\u67e5\u627e formatting.php \u6587\u4ef6\u5185 length\u2019, 55 \u66ff\u6362 length\u2019, 56 :\n\n```\nsed -i s/'length', 55'/'length', 56'/g `grep 'length', 55' -rl --include='formatting.php' ./`\n```\u3002", "top": 0, "createdAt": 1752986446, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P4": {"htmlDir": "docs/post/tong-bu-dai-ma.html", "labels": ["documentation"], "postTitle": "\u540c\u6b65\u4ee3\u7801", "postUrl": "post/tong-bu-dai-ma.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/4", "commentNum": 0, "wordCount": 1591, "description": "## \u5e38\u7528\u7684 Git \u547d\u4ee4\n\n\u66f4\u65b0\u7aef\u53e3\u5237\u65b0DNS\n\n```\ngit config --global http.proxy 127.0.0.1:7890\ngit config --global https.proxy 127.0.0.1:7890\nipconfig/flushdns\n```\n### \u4ee3\u7801\u4ed3\u5e93\u62c9\u53d6\u63a8\u9001\n\n- https://github.com/settings/ssh/new\n- https://huggingface.co/settings/keys/add?type=ssh\n\n\u62c9\u53d6\u4ed3\u5e93\u672c\u5730\u5230\u672c\u5730\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\n\n```\ngit clone https://github.com/lllyasviel/Fooocus.git\ngit config --global user.email 'you@example.com'\ngit config --global user.name 'Your Name'\ngit remote set-url origin git@github.com:lllyasviel/Fooocus.git\nssh-keygen -t rsa -b 4096 -C 'your_email@example.com'\nssh -T git@github.com\ngit add . \ngit commit -m 'Test' \n```\n\n\u672c\u5730\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\n```\ngit push origin main\n```\n\u8fdc\u7a0b\u4ed3\u5e93\u540c\u6b65\u5230\u672c\u5730 \n```\ngit pull origin main  \n```\n\n### 1. **\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93**\n\n\u514b\u9686\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u5230\u672c\u5730\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a\n\n```bash\ngit clone https://github.com/lllyasviel/Fooocus.git\n```\n\n### 2. **\u68c0\u67e5\u5f53\u524d Git \u914d\u7f6e**\n\n\u67e5\u770b Git \u7684\u5168\u5c40\u914d\u7f6e\uff0c\u5982\u7528\u6237\u540d\u548c\u90ae\u7bb1\uff1a\n\n```bash\ngit config --list\n```\n\n### 3. **\u68c0\u67e5\u5f53\u524d\u72b6\u6001**\n\n\u67e5\u770b\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u548c\u6682\u5b58\u533a\u7684\u72b6\u6001\uff08\u54ea\u4e9b\u6587\u4ef6\u5df2\u4fee\u6539\u3001\u672a\u8ddf\u8e2a\u7b49\uff09\uff1a\n\n```bash\ngit status\n```\n\n### 4. **\u6dfb\u52a0\u6587\u4ef6\u5230\u6682\u5b58\u533a**\n\n\u5c06\u6587\u4ef6\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff0c\u51c6\u5907\u63d0\u4ea4\uff1a\n\n```bash\ngit add <file_name>  # \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\ngit add .  # \u6dfb\u52a0\u6240\u6709\u4fee\u6539\u7684\u6587\u4ef6\n```\n\n### 5. **\u63d0\u4ea4\u66f4\u6539**\n\n\u63d0\u4ea4\u66f4\u6539\u5e76\u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f\uff1a\n\n```bash\ngit commit -m '\u63cf\u8ff0\u672c\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9'\n```\n\n### 6. **\u63a8\u9001\u8fdc\u7a0b\u4ed3\u5e93**\n\n\u5c06\u672c\u5730\u66f4\u6539\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff1a\n\n```bash\ngit push origin branch-name\n```\n\n### 7. **\u8fdc\u7a0b\u4ed3\u5e93\u66f4\u65b0**\n\n\u62c9\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u66f4\u65b0\uff0c\u5e76\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f\uff1a\n\n```bash\ngit pull origin branch-name\n```\n\n### 8. **\u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\u4fe1\u606f**\n\n\u67e5\u770b\u5f53\u524d\u9879\u76ee\u7684\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\uff1a\n\n```bash\ngit remote -v\n```\n\n### 9. **\u67e5\u770b\u63d0\u4ea4\u5386\u53f2**\n\n\u67e5\u770b\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\uff1a\n\n```bash\ngit log\n```\n\n### 10. **\u521b\u5efa\u65b0\u5206\u652f**\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\uff0c\u5e76\u5207\u6362\u5230\u8be5\u5206\u652f\uff1a\n\n```bash\ngit checkout -b new-branch-name\n```\n\n### 11. **\u5207\u6362\u5206\u652f**\n\n\u5207\u6362\u5230\u5df2\u6709\u7684\u5206\u652f\uff1a\n\n```bash\ngit checkout branch-name\n```\n\n### 12. **\u5408\u5e76\u5206\u652f**\n\n\u5c06\u5f53\u524d\u5206\u652f\u5408\u5e76\u5230\u76ee\u6807\u5206\u652f\uff1a\n\n```bash\ngit merge branch-name\n```\u3002", "top": 0, "createdAt": 1752986497, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P5": {"htmlDir": "docs/post/md5-chu-li-wen-jian.html", "labels": ["documentation"], "postTitle": "md5\u5904\u7406\u6587\u4ef6", "postUrl": "post/md5-chu-li-wen-jian.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/5", "commentNum": 0, "wordCount": 4743, "description": "## \u5220\u9664MD5\u503c\u76f8\u540c\u7684\u6587\u4ef6\n\n\u901a\u8fc7MD5\u503c\u628a\u91cd\u590d\u7684\u6587\u4ef6\u79fb\u5230del\u6587\u4ef6\u5939\uff0c\u8868\u683c\u8bb0\u5f55\u3002", "top": 0, "createdAt": 1752986546, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P6": {"htmlDir": "docs/post/shan-chu-zhong-fu-tu-xiang.html", "labels": ["python"], "postTitle": "\u5220\u9664\u91cd\u590d\u56fe\u50cf", "postUrl": "post/shan-chu-zhong-fu-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/6", "commentNum": 0, "wordCount": 2195, "description": "```\nimport os\nimport cv2\nimport numpy as np\nfrom keras.applications.resnet50 import ResNet50, preprocess_input\n \n# pip install opencv-python numpy keras tensorflow\n \ndef extract_image_features(image_path):\n    image = cv2.imread(image_path)  # \u8bfb\u53d6\u56fe\u7247\n    image = cv2.resize(image, (256, 256))  # \u7f29\u653e\u56fe\u7247\u5230\u7edf\u4e00\u5c3a\u5bf8\n    image = image[16:240, 16:240]  # \u88c1\u526a\u4e2d\u95f4\u533a\u57df(224x224)\n    \n    image = np.expand_dims(image, axis=0)  # \u6269\u5c55\u7ef4\u5ea6\u4ee5\u5339\u914d\u6a21\u578b\u8f93\u5165\u8981\u6c42\n    image = preprocess_input(image)  # \u9884\u5904\u7406\u56fe\u7247\n    \n    features = model.predict(image)  # \u63d0\u53d6\u7279\u5f81\u5411\u91cf\n    features /= np.linalg.norm(features)  # \u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf\n    \n    return features.flatten()  # \u5e73\u94fa\u7279\u5f81\u5411\u91cf\n \ndef delete_duplicate_images():\n    current_dir = os.getcwd()  # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u8def\u5f84\n    files = [f for f in os.listdir(current_dir) if os.path.isfile(os.path.join(current_dir, f))]  # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\n \n    image_features = {}\n    deleted_count = 0  # \u8bb0\u5f55\u5220\u9664\u7684\u56fe\u7247\u6570\u91cf\n    duplicate_pairs = []  # \u7528\u4e8e\u4fdd\u5b58\u91cd\u590d\u56fe\u7247\u7684\u6587\u4ef6\u540d\u5bf9\n \n    for file_name in files:\n        if file_name.endswith('.jpg') or file_name.endswith('.png'):  # \u7b5b\u9009\u51fa\u56fe\u7247\u6587\u4ef6\n            file_path = os.path.join(current_dir, file_name)\n            image_feature = extract_image_features(file_path)\n \n            is_duplicate = False\n            for existing_path, existing_feature in image_features.items():\n                distance = np.linalg.norm(existing_feature - image_feature)  # \u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\n                if distance < 0.3:  # \u8bbe\u5b9a\u9608\u503c\u6765\u5224\u65ad\u76f8\u4f3c\u5ea6\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\n                    is_duplicate = True\n                    print(f'\u5220\u9664\u91cd\u590d\u56fe\u7247: {file_path}')\n                    os.remove(file_path)\n                    deleted_count += 1\n                    # \u8bb0\u5f55\u91cd\u590d\u7684\u6587\u4ef6\u540d\u5bf9 (\u5f53\u524d\u6587\u4ef6\u540d\u548c\u5df2\u6709\u6587\u4ef6\u540d)\n                    duplicate_pairs.append((file_name, os.path.basename(existing_path)))\n                    break\n \n            if not is_duplicate:\n                image_features[file_path] = image_feature\n \n    # \u5c06\u91cd\u590d\u56fe\u7247\u6587\u4ef6\u540d\u5bf9\u4fdd\u5b58\u5230txt\u6587\u4ef6\n    if duplicate_pairs:\n        with open('duplicate_images.txt', 'w') as f:\n            for file1, file2 in duplicate_pairs:\n                f.write(f'{file1} \u4e0e {file2} \u91cd\u590d\\n')\n    \n    print('\u5df2\u5220\u9664 {} \u5f20\u91cd\u590d\u56fe\u7247'.format(deleted_count))\n \n# \u52a0\u8f7d\u9884\u8bad\u7ec3\u7684ResNet50\u6a21\u578b\nmodel = ResNet50(weights='imagenet', include_top=False, pooling='avg')\n \ndelete_duplicate_images()\n```\u3002", "top": 0, "createdAt": 1752986593, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P7": {"htmlDir": "docs/post/yi-dao-wen-jian.html", "labels": ["documentation"], "postTitle": "\u79fb\u5230\u6587\u4ef6", "postUrl": "post/yi-dao-wen-jian.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/7", "commentNum": 0, "wordCount": 2440, "description": "### \u6309\u7167\u6307\u5b9a\u6587\u4ef6\u540d\u79fb\u5230\u6587\u4ef6\n\n### \u7b80\u4ecb\n\u5047\u8bbe\u76ee\u5f55\u4e0e\u6587\u4ef6\u5982\u4e0b\uff1a\n```\nH:\\\n\u251c\u2500 data\n\u2502   \u251c\u2500 report1.txt\n\u2502   \u251c\u2500 image_fail.png\n\u2502   \u2514\u2500 sub\n\u2502       \u2514\u2500 test_error.log\n\u251c\u2500 list.txt\n\u2514\u2500 copy    \uff08\u521d\u59cb\u4e3a\u7a7a\uff09\n```\n\nlist.txt \u5185\u5bb9\uff08\u6bcf\u884c\u4e00\u4e2a\u5173\u952e\u5b57\uff09\n```\nreport\nfail\nmissing\nerror\n```\n\n\u8fd0\u884c\u63a7\u5236\u53f0\u8f93\u51fa\uff1a\n```\n\u2714 \u5df2\u79fb\u52a8: 'report1.txt' \u5bf9\u5e94\u5173\u952e\u5b57 'report' \u5230 'H:\\copy\\report1.txt'\n\u2714 \u5df2\u79fb\u52a8: 'image_fail.png' \u5bf9\u5e94\u5173\u952e\u5b57 'fail' \u5230 'H:\\copy\\image_fail.png'\n\u26a0 \u672a\u627e\u5230\u5339\u914d\u6587\u4ef6 for key: 'missing'\n\u2714 \u5df2\u79fb\u52a8: 'test_error.log' \u5bf9\u5e94\u5173\u952e\u5b57 'error' \u5230 'H:\\copy\\test_error.log'\n \n\u5171 4 \u4e2a\u5173\u952e\u5b57\uff0c\u6210\u529f\u79fb\u52a8 3 \u4e2a\uff0c\u5bf9\u5e94\u6587\u4ef6\u3002", "top": 0, "createdAt": 1752986659, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P8": {"htmlDir": "docs/post/cha-zhao-ti-huan.html", "labels": ["documentation"], "postTitle": "\u67e5\u627e\u66ff\u6362", "postUrl": "post/cha-zhao-ti-huan.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/8", "commentNum": 0, "wordCount": 277, "description": "\u641c\u7d22\u5339\u914d\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709[\u6587\u4ef6\u540d]\u6216\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u6253\u5370\u663e\u793a\u884c\u53f7\n```\ngrep -rn 'Money' *\n```\n\n\u641c\u7d22\u591a\u4e2a\u6587\u4ef6\u5e76\u67e5\u627e\u5339\u914d\u6587\u672c\u5728\u54ea\u4e9b\u6587\u4ef6\u4e2d\uff1a\n```\ngrep -l 'Money' file1 file2 file3...\n```\n\n\u67e5\u627e formatting.php \u6587\u4ef6\u5185 length\u2019, 55 \u66ff\u6362 length\u2019, 56 :\n```\nsed -i s/'length', 55'/'length', 56'/g `grep 'length', 55' -rl --include='formatting.php' ./`\n```\u3002", "top": 0, "createdAt": 1752986705, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P9": {"htmlDir": "docs/post/huo-qu-wang-ye-lian-jie.html", "labels": ["documentation"], "postTitle": "\u83b7\u53d6\u7f51\u9875\u94fe\u63a5", "postUrl": "post/huo-qu-wang-ye-lian-jie.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/9", "commentNum": 0, "wordCount": 1069, "description": "\u63a7\u5236\u53f0\u6d4f\u89c8\u5668\u83b7\u53d6\u7f51\u5740\n\n## bilibili\n```\nconst links = document.getElementsByTagName('a');\n// \u904d\u5386\u6240\u6709\u94fe\u63a5\u5e76\u67e5\u627e\u5339\u914d\u7684\u7f51\u5740\nfor (const link of links) {\n  const href = link.href;\n  // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7c7b\u4f3c\u7684\u7f51\u5740\n  const urlRegex = /https:\\/\\/www\\.bilibili\\.com\\/video\\/[A-Za-z0-9]+\\/?/;\n  if (urlRegex.test(href)) {\n    console.log('\u5339\u914d\u5230\u7684\u7f51\u5740: ' + href);\n  }\n}\n```\n\n## youtube\n\n```\nconst links = document.getElementsByTagName('a');\n\n// \u904d\u5386\u6240\u6709\u94fe\u63a5\u5e76\u67e5\u627e\u5339\u914d\u7684\u7f51\u5740\nfor (const link of links) {\n  const href = link.href;\n  // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d YouTube \u89c6\u9891\u94fe\u63a5\n  const urlRegex = /https:\\/\\/www\\.youtube\\.com\\/watch\\?v=[A-Za-z0-9_-]+/;\n  if (urlRegex.test(href)) {\n    console.log('\u5339\u914d\u5230\u7684\u7f51\u5740: ' + href);\n  }\n}\n```\n## dataset\n```\nconst links = document.getElementsByTagName('a');\n\n// \u904d\u5386\u6240\u6709\u94fe\u63a5\u5e76\u67e5\u627e\u5339\u914d Hugging Face blob \u5730\u5740\nfor (const link of links) {\n  const href = link.href;\n  // \u5339\u914d datasets \u4ed3\u5e93 blob \u94fe\u63a5\n  const urlRegex = /^https:\\/\\/huggingface\\.co\\/datasets\\/[^/]+\\/[^/]+\\/blob\\/[^/]+\\/.+$/;\n  if (urlRegex.test(href)) {\n    // \u66ff\u6362 blob \u2192 resolve\n    const realUrl = href.replace('/blob/', '/resolve/');\n    console.log('\u76f4\u94fe: ' + realUrl);\n  }\n}\n```\n\u3002", "top": 0, "createdAt": 1752986735, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P10": {"htmlDir": "docs/post/chuang-jian-zhi-ding-da-xiao-wen-jian.html", "labels": ["documentation"], "postTitle": "\u521b\u5efa\u6307\u5b9a\u5927\u5c0f\u6587\u4ef6", "postUrl": "post/chuang-jian-zhi-ding-da-xiao-wen-jian.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/10", "commentNum": 0, "wordCount": 161, "description": "\u8fd0\u884c cmd \u6267\u884c\u521b\u5efa\u6587\u672c\u6587\u4ef6\n\n```\nfsutil file createnew f:\\1GB.txt 1073741824\n```\n\n\u6362\u7b97\u5355\u4f4d\n\n```\nbyte (B):1073741824\nkilobyte (kB):1048576\nmegabyte (MB):1024\ngigabyte (GB):\t1\n```\u3002", "top": 0, "createdAt": 1752986762, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P11": {"htmlDir": "docs/post/dao-chu-docx-wen-dang-li-de-tu-xiang.html", "labels": ["documentation"], "postTitle": "\u5bfc\u51fadocx\u6587\u6863\u91cc\u7684\u56fe\u50cf", "postUrl": "post/dao-chu-docx-wen-dang-li-de-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/11", "commentNum": 0, "wordCount": 3785, "description": "## \u6267\u884c\u7ed3\u679c\n```\nf:/doc/\n\u2502\n\u251c\u2500\u2500 document1.docx\n\u251c\u2500\u2500 document2.docx\n\u2514\u2500\u2500 document3.docx\n```\n\n```\nf:/doc/png/\n\u2502\n\u251c\u2500\u2500 document1/\n\u2502   \u251c\u2500\u2500 document1.txt      # Contains the extracted text (e.g., '\u56fe\u7247\u7b80\u4ecb\uff1adescription text')\n\u2502   \u251c\u2500\u2500 document1_000001.png  # Image extracted from the document, renamed based on the corresponding text\n\u2502   \u251c\u2500\u2500 document1_000002.png  # Another image\n\u2502   \u2514\u2500\u2500 document1_000003.png  # Another image\n\u2502\n\u251c\u2500\u2500 document2/\n\u2502   \u251c\u2500\u2500 document2.txt\n\u2502   \u251c\u2500\u2500 document2_000001.png\n\u2502   \u251c\u2500\u2500 document2_000002.png\n\u2502   \u2514\u2500\u2500 document2_000003.png\n\u2502\n\u2514\u2500\u2500 document3/\n    \u251c\u2500\u2500 document3.txt\n    \u251c\u2500\u2500 document3_000001.png\n    \u251c\u2500\u2500 document3_000002.png\n    \u2514\u2500\u2500 document3_000003.png\n```\n\n\n##  \u5b8c\u6574\u4ee3\u7801\n```\nfrom docx import Document\nimport os\nimport re\nimport shutil\n \n# pip install python-docx\n# pip install lxml  # \u901a\u5e38\u4e0d\u5fc5\u9700\uff0c\u9664\u975e\u5728\u5b89\u88c5 python-docx \u540e\u51fa\u73b0\u95ee\u9898\n \n \ndef get_picture(document, paragraph):\n    '''\n    \u4ece\u6bb5\u843d\u4e2d\u83b7\u53d6\u56fe\u7247\n    '''\n    img = paragraph._element.xpath('.//pic:pic')\n    if not img:\n        return None\n    img = img[0]\n    embed = img.xpath('.//a:blip/@r:embed')[0]\n    related_part = document.part.related_parts[embed]\n    image = related_part.image\n    return image\n \ndef extract_content(docx_path, output_dir):\n    try:\n        doc = Document(docx_path)\n        base_filename = os.path.splitext(os.path.basename(docx_path))[0]\n        doc_output_dir = os.path.join(output_dir, base_filename)\n        os.makedirs(doc_output_dir, exist_ok=True)\n        shutil.copy(docx_path, doc_output_dir)\n \n        extracted_text = []\n        extracted_images = []\n \n        for para in doc.paragraphs:\n            match = re.search(r'\u56fe\u7247\u7b80\u4ecb\uff1a(.*)', para.text)\n            if match:\n                violation_text = match.group(1).strip() if match.group(1).strip() else 'XXX'\n                extracted_text.append(violation_text)\n \n            image = get_picture(doc, para)\n            if image:\n                blob = image.blob\n                image_index = len(extracted_images) + 1\n                formatted_index = f'{image_index:06d}'\n                img_path = os.path.join(doc_output_dir, f'{base_filename}_{formatted_index}.png')\n                extracted_images.append(img_path)\n                with open(img_path, 'wb') as f:\n                    f.write(blob)\n \n        if extracted_text:\n            text_filename = f'{base_filename}.txt'\n            text_path = os.path.join(doc_output_dir, text_filename)\n            with open(text_path, 'w', encoding='utf-8') as text_file:\n                text_file.write('\\n'.join(extracted_text))\n            rename_images_based_on_text(doc_output_dir, text_path, extracted_images)\n \n    except Exception as e:\n        print(f'Error processing {docx_path}: {e}')\n \ndef rename_images_based_on_text(output_dir, text_file_path, extracted_images):\n    with open(text_file_path, 'r', encoding='utf-8') as file:\n        lines = file.readlines()\n \n    if len(extracted_images) != len(lines):\n        print(f'Error: The number of images ({len(extracted_images)}) and text lines ({len(lines)}) do not match in {output_dir}.')\n        return\n \n    for image_path, line in zip(extracted_images, lines):\n        new_image_name = f'{os.path.splitext(image_path)[0]}_{line.strip()}{os.path.splitext(image_path)[1]}'\n        os.rename(image_path, new_image_name)\n        print(f'Renamed '{image_path}' to '{new_image_name}'')\n \ndef process_documents(folder_path, output_folder):\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.docx') or filename.endswith('.doc'):\n            docx_path = os.path.join(folder_path, filename)\n            extract_content(docx_path, output_folder)\n \n# \u793a\u4f8b\u7528\u6cd5\nfolder_path = 'f:/doc'\noutput_folder = 'f:/doc/png'\nprocess_documents(folder_path, output_folder)\n```\u3002", "top": 0, "createdAt": 1752986800, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P12": {"htmlDir": "docs/post/shi-pin-ti-qu-tu-xiang.html", "labels": ["documentation"], "postTitle": "\u89c6\u9891\u63d0\u53d6\u56fe\u50cf", "postUrl": "post/shi-pin-ti-qu-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/12", "commentNum": 0, "wordCount": 1393, "description": "```\nimport os\nimport cv2\nfrom pathlib import Path\n\n# \u6307\u5b9a\u89c6\u9891\u6240\u5728\u76ee\u5f55\nvideo_dir = r'c:\\video'  # \u4fee\u6539\u4e3a\u4f60\u7684\u89c6\u9891\u76ee\u5f55\noutput_dir = r'c:\\img'  # \u4fdd\u5b58\u56fe\u7247\u7684\u76ee\u5f55\n\n# \u6bcf\u79d2\u63d0\u53d6\u5e27\u6570\nframes_per_second = 1  # \u6bcf\u79d2\u63d0\u53d61\u5e27\n\n# \u786e\u4fdd\u8f93\u51fa\u76ee\u5f55\u5b58\u5728\nPath(output_dir).mkdir(parents=True, exist_ok=True)\n\n# \u904d\u5386\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\nfor filename in os.listdir(video_dir):\n    if filename.endswith(('.mp4', '.avi', '.mov', '.mkv')):  # \u6839\u636e\u89c6\u9891\u683c\u5f0f\u8c03\u6574\n        video_path = os.path.join(video_dir, filename)\n\n        # \u4f7f\u7528 OpenCV \u6253\u5f00\u89c6\u9891\u6587\u4ef6\n        cap = cv2.VideoCapture(video_path)\n\n        # \u83b7\u53d6\u89c6\u9891\u7684\u5e27\u7387\n        fps = cap.get(cv2.CAP_PROP_FPS)\n        print(f'\u89c6\u9891 {filename} \u7684\u5e27\u7387: {fps} \u5e27/\u79d2')\n\n        frame_count = 0\n        saved_frame_count = 0\n\n        while True:\n            ret, frame = cap.read()\n\n            # \u5982\u679c\u8bfb\u53d6\u6210\u529f\n            if ret:\n                frame_count += 1\n\n                # \u6bcf\u9694\u4e00\u5b9a\u5e27\u6570\uff08\u6839\u636efps\u8ba1\u7b97\u6bcf\u79d2\u63d0\u53d61\u5e27\uff09\n                if frame_count % int(fps / frames_per_second) == 0:\n                    # \u4f7f\u7528 pathlib \u5904\u7406\u8def\u5f84\u548c\u6587\u4ef6\u540d\n                    image_filename = Path(filename).stem + f'_{saved_frame_count + 1}.jpg'\n                    image_path = Path(output_dir) / image_filename\n\n                    # \u4fdd\u5b58\u56fe\u7247\n                    cv2.imwrite(str(image_path), frame)\n                    saved_frame_count += 1\n                    print(f'\u4fdd\u5b58\u56fe\u7247\uff1a{image_path}')\n            else:\n                break  # \u5982\u679c\u6ca1\u6709\u66f4\u591a\u5e27\u53ef\u8bfb\u53d6\uff0c\u8df3\u51fa\u5faa\u73af\n\n        # \u91ca\u653e\u89c6\u9891\u5bf9\u8c61\n        cap.release()\n\nprint('\u6240\u6709\u89c6\u9891\u7684\u5e27\u63d0\u53d6\u5b8c\u6bd5\u3002", "top": 0, "createdAt": 1752986834, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P13": {"htmlDir": "docs/post/zai-xian-wen-jian-jia-mi-jie-mi.html", "labels": ["documentation"], "postTitle": "\u5728\u7ebf\u6587\u4ef6\u52a0\u5bc6\u89e3\u5bc6", "postUrl": "post/zai-xian-wen-jian-jia-mi-jie-mi.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/13", "commentNum": 0, "wordCount": 2018, "description": "huggingface  spaces gradio\n\n## requirements.txt\n```\ngradio\ncryptography\n```\n\n## app.py\n\n```\nimport gradio as gr\nfrom cryptography.fernet import Fernet\nimport os\n\n# AES \u52a0\u5bc6\u51fd\u6570\uff08Fernet \u5b9e\u73b0\uff09\ndef encrypt_file_gr(file):\n    file_path = file.name\n    key = Fernet.generate_key()\n    cipher = Fernet(key)\n    with open(file_path, 'rb') as f:\n        data = f.read()\n    encrypted_data = cipher.encrypt(data)\n    enc_path = file_path + '.enc'\n    with open(enc_path, 'wb') as f:\n        f.write(encrypted_data)\n    return key.decode(), enc_path\n\n# AES \u89e3\u5bc6\u51fd\u6570\uff0c\u6062\u590d\u539f\u59cb\u6587\u4ef6\u540d\u548c\u683c\u5f0f\ndef decrypt_file_gr(file, key):\n    file_path = file.name\n    cipher = Fernet(key.encode())\n    try:\n        with open(file_path, 'rb') as f:\n            encrypted_data = f.read()\n        decrypted_data = cipher.decrypt(encrypted_data)\n        # \u53bb\u6389 .enc \u540e\u7f00\uff0c\u6062\u590d\u539f\u59cb\u6587\u4ef6\u540d\n        if file_path.lower().endswith('.enc'):\n            dec_path = file_path[:-4]\n        else:\n            dec_path = file_path + '.dec'\n        with open(dec_path, 'wb') as f:\n            f.write(decrypted_data)\n        return dec_path\n    except Exception:\n        return None\n\n# Gradio \u754c\u9762\u8bbe\u8ba1\nwith gr.Blocks() as demo:\n    gr.Markdown('# \u6587\u4ef6\u52a0\u5bc6\u89e3\u5bc6\u5de5\u5177')\n\n    with gr.Tab('\u52a0\u5bc6'):\n        encrypt_in = gr.File(label='\u4e0a\u4f20\u6587\u4ef6')\n        encrypt_btn = gr.Button('\u52a0\u5bc6\u6587\u4ef6 \ud83d\udd12')\n        # \u6587\u672c\u6846\u663e\u793a\u5bc6\u94a5\u5e76\u63d0\u4f9b\u590d\u5236\u6309\u94ae\n        encrypt_key = gr.Textbox(label='\u751f\u6210\u7684\u5bc6\u94a5', interactive=False, show_copy_button=True)\n        encrypt_out = gr.File(label='\u4e0b\u8f7d\u52a0\u5bc6\u6587\u4ef6 (.enc)')\n        encrypt_btn.click(\n            fn=encrypt_file_gr,\n            inputs=encrypt_in,\n            outputs=[encrypt_key, encrypt_out]\n        )\n\n    with gr.Tab('\u89e3\u5bc6'):\n        decrypt_in = gr.File(label='\u4e0a\u4f20\u52a0\u5bc6\u6587\u4ef6 (.enc)')\n        decrypt_key_in = gr.Textbox(label='\u8f93\u5165\u5bc6\u94a5')\n        decrypt_btn = gr.Button('\u89e3\u5bc6\u6587\u4ef6 \ud83d\udd13')\n        decrypt_out = gr.File(label='\u4e0b\u8f7d\u89e3\u5bc6\u6587\u4ef6\uff08\u539f\u59cb\u683c\u5f0f\uff09')\n        decrypt_btn.click(\n            fn=decrypt_file_gr,\n            inputs=[decrypt_in, decrypt_key_in],\n            outputs=decrypt_out\n        )\n\nif __name__ == '__main__':\n    demo.launch()\n```\u3002", "top": 0, "createdAt": 1752986872, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P14": {"htmlDir": "docs/post/typecho -mi-ma-wang-ji-mi-ma- sqlite -shu-ju-ku.html", "labels": ["documentation"], "postTitle": "typecho \u5bc6\u7801\u5fd8\u8bb0\u5bc6\u7801 sqlite \u6570\u636e\u5e93", "postUrl": "post/typecho%20-mi-ma-wang-ji-mi-ma-%20sqlite%20-shu-ju-ku.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/14", "commentNum": 0, "wordCount": 1303, "description": "\u535a\u5ba2\u5fd8\u8bb0\u4e86\u5bc6\u7801\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5\u627e\u56de\u5bc6\u7801\u3002", "top": 0, "createdAt": 1752986902, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P15": {"htmlDir": "docs/post/tu-xiang-fen-lei-jiao-ben.html", "labels": ["documentation"], "postTitle": "\u56fe\u50cf\u5206\u7c7b\u811a\u672c", "postUrl": "post/tu-xiang-fen-lei-jiao-ben.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/15", "commentNum": 0, "wordCount": 3127, "description": "## ResNet50\n```\nimport subprocess\nimport sys\n\n# \u81ea\u52a8\u5b89\u88c5\u4f9d\u8d56\ndef install_packages():\n    packages = ['torch', 'torchvision', 'pillow', 'pandas', 'openpyxl', 'requests']\n    for pkg in packages:\n        try:\n            __import__(pkg)\n        except ImportError:\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', pkg])\n\ninstall_packages()\n\n# === \u5bfc\u5165\u4f9d\u8d56 ===\nimport os\nimport shutil\nimport torch\nfrom torchvision import models, transforms\nfrom PIL import Image\nimport pandas as pd\nfrom collections import defaultdict\nimport requests\n\n# === \u56fe\u50cf\u9884\u5904\u7406\uff08ImageNet\uff09===\ntransform = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(\n        mean=[0.485, 0.456, 0.406],\n        std=[0.229, 0.224, 0.225]\n    )\n])\n\n# === \u52a0\u8f7d ResNet50 \u6a21\u578b ===\nmodel = models.resnet50(pretrained=True)\nmodel.eval()\n\n# === \u52a0\u8f7d\u7c7b\u522b\u6807\u7b7e ===\n# https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\n\nLABELS_PATH = r'g:\\Dataset\\Image\\COCO_Annotations\\imagenet_classes.txt'\nwith open(LABELS_PATH, 'r', encoding='utf-8') as f:\n    labels = f.read().strip().split('\\n')\n\n\n# === \u5355\u5f20\u56fe\u50cf\u5206\u7c7b ===\ndef classify_image(image_path):\n    image = Image.open(image_path).convert('RGB')\n    input_tensor = transform(image).unsqueeze(0)\n    with torch.no_grad():\n        output = model(input_tensor)\n        probs = torch.nn.functional.softmax(output[0], dim=0)\n        top1_prob, top1_class = torch.topk(probs, 1)\n    return labels[top1_class.item()], top1_prob.item()\n\n# === \u5206\u7c7b\u4e3b\u6d41\u7a0b ===\ndef organize_images_by_class(src_dir, dst_dir):\n    records = []\n    class_counts = defaultdict(int)\n\n    for fname in os.listdir(src_dir):\n        if not fname.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.png')):\n            continue\n\n        img_path = os.path.join(src_dir, fname)\n        predicted_class, prob = classify_image(img_path)\n        class_folder = os.path.join(dst_dir, predicted_class)\n        os.makedirs(class_folder, exist_ok=True)\n\n        shutil.copy(img_path, os.path.join(class_folder, fname))\n        records.append({\n            '\u6587\u4ef6\u540d': fname,\n            '\u9884\u6d4b\u7c7b\u522b': predicted_class,\n            '\u7f6e\u4fe1\u5ea6': round(prob, 4)\n        })\n        class_counts[predicted_class] += 1\n\n    # \u4fdd\u5b58\u7ed3\u679c\u5230 Excel\n    df = pd.DataFrame(records)\n    count_df = pd.DataFrame([\n        {'\u9884\u6d4b\u7c7b\u522b': k, '\u56fe\u7247\u6570\u91cf': v}\n        for k, v in sorted(class_counts.items(), key=lambda x: -x[1])\n    ])\n    output_excel = os.path.join(dst_dir, 'result.xlsx')\n    with pd.ExcelWriter(output_excel) as writer:\n        df.to_excel(writer, index=False, sheet_name='\u5206\u7c7b\u7ed3\u679c')\n        count_df.to_excel(writer, index=False, sheet_name='\u7c7b\u522b\u6c47\u603b')\n\n    print(f'\\n\u2705 \u5206\u7c7b\u5b8c\u6210\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728 {output_excel}')\n    print(f'\ud83d\udcc1 \u5206\u7c7b\u540e\u7684\u6587\u4ef6\u4f4d\u4e8e: {dst_dir}')\n\n# === \u547d\u4ee4\u884c\u5165\u53e3 ===\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u5e76\u590d\u5236\u5230\u5bf9\u5e94\u7c7b\u522b\u76ee\u5f55')\n    parser.add_argument('--src', default=r'G:\\Dataset\\Image\\images', help='\u539f\u59cb\u56fe\u50cf\u8def\u5f84')\n    parser.add_argument('--dst', default=r'G:\\Dataset\\Image\\tag', help='\u5206\u7c7b\u7ed3\u679c\u4fdd\u5b58\u8def\u5f84')\n    args = parser.parse_args()\n\n    organize_images_by_class(args.src, args.dst)\n```\u3002", "top": 0, "createdAt": 1752986940, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P16": {"htmlDir": "docs/post/tu-xiang-zhi-fang-tu-zai-xian-diao-jie.html", "labels": ["documentation"], "postTitle": "\u56fe\u50cf\u76f4\u65b9\u56fe\u5728\u7ebf\u8c03\u8282", "postUrl": "post/tu-xiang-zhi-fang-tu-zai-xian-diao-jie.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/16", "commentNum": 0, "wordCount": 5715, "description": "```\n<!DOCTYPE html>\n<html lang='zh-CN'>\n<head>\n<meta charset='UTF-8'>\n<title>\u5728\u7ebf\u56fe\u50cf\u76f4\u65b9\u56fe\u4e0e\u8c03\u6574</title>\n<style>\nbody { font-family: sans-serif; padding: 20px; max-width: 1000px; margin: auto; }\n#controls { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-bottom: 20px; }\n.control-group { display: flex; align-items: center; }\n.control-group label { width: 80px; }\n.control-group input[type=range] { flex: 1; margin: 0 10px; }\n.control-group input[type=number] { width: 60px; }\ncanvas { border: 1px solid #ccc; display: block; margin-bottom: 20px; }\n</style>\n</head>\n<body>\n<h2>\u5728\u7ebf\u56fe\u50cf\u76f4\u65b9\u56fe\u4e0e\u8c03\u6574</h2>\n<input type='file' id='fileInput' accept='image/*'>\n<div id='controls'>\n<div class='control-group'>\n<label for='exposureRange'>\u66dd\u5149</label>\n<input type='range' id='exposureRange' min='-2' max='2' step='0.1' value='0'>\n<input type='number' id='exposureNumber' min='-2' max='2' step='0.1' value='0'>\n</div>\n<div class='control-group'>\n<label for='contrastRange'>\u5bf9\u6bd4\u5ea6</label>\n<input type='range' id='contrastRange' min='-1' max='1' step='0.05' value='0'>\n<input type='number' id='contrastNumber' min='-1' max='1' step='0.05' value='0'>\n</div>\n<div class='control-group'>\n<label for='highlightsRange'>\u9ad8\u5149</label>\n<input type='range' id='highlightsRange' min='-1' max='1' step='0.05' value='0'>\n<input type='number' id='highlightsNumber' min='-1' max='1' step='0.05' value='0'>\n</div>\n<div class='control-group'>\n<label for='shadowsRange'>\u9634\u5f71</label>\n<input type='range' id='shadowsRange' min='-1' max='1' step='0.05' value='0'>\n<input type='number' id='shadowsNumber' min='-1' max='1' step='0.05' value='0'>\n</div>\n<div class='control-group'>\n<label for='whitesRange'>\u767d\u8272</label>\n<input type='range' id='whitesRange' min='-1' max='1' step='0.05' value='0'>\n<input type='number' id='whitesNumber' min='-1' max='1' step='0.05' value='0'>\n</div>\n<div class='control-group'>\n<label for='blacksRange'>\u9ed1\u8272</label>\n<input type='range' id='blacksRange' min='-1' max='1' step='0.05' value='0'>\n<input type='number' id='blacksNumber' min='-1' max='1' step='0.05' value='0'>\n</div>\n</div>\n\n<canvas id='previewCanvas' width='800' height='600'></canvas>\n<canvas id='histCanvas' width='800' height='200'></canvas>\n\n<!-- \u5f15\u5165 Chart.js -->\n<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>\n<script>\nlet originalImageData = null;\nconst previewCanvas = document.getElementById('previewCanvas');\nconst previewCtx = previewCanvas.getContext('2d');\nconst histCanvas = document.getElementById('histCanvas');\nconst histCtx = histCanvas.getContext('2d');\nlet histChart = null;\n\n// \u8bfb\u53d6\u63a7\u4ef6\u5143\u7d20\nconst controls = ['exposure','contrast','highlights','shadows','whites','blacks'];\nconst state = {};\ncontrols.forEach(name => {\nstate[name] = 0;\nconst rangeEl = document.getElementById(name + 'Range');\nconst numEl = document.getElementById(name + 'Number');\n// \u540c\u6b65\u6ed1\u5757\u548c\u6570\u5b57\nrangeEl.addEventListener('input', () => { numEl.value = rangeEl.value; updateState(); });\nnumEl.addEventListener('input', () => { rangeEl.value = numEl.value; updateState(); });\n});\n\ndocument.getElementById('fileInput').addEventListener('change', (e) => {\nconst file = e.target.files[0];\nif (!file) return;\nconst img = new Image();\nimg.onload = () => {\n// \u8c03\u6574\u753b\u5e03\u5927\u5c0f\npreviewCanvas.width = img.width;\npreviewCanvas.height = img.height;\npreviewCtx.drawImage(img, 0, 0);\noriginalImageData = previewCtx.getImageData(0, 0, img.width, img.height);\napplyAdjustments();\n};\nimg.src = URL.createObjectURL(file);\n});\n\nfunction updateState() {\ncontrols.forEach(name => {\nstate[name] = parseFloat(document.getElementById(name + 'Number').value);\n});\napplyAdjustments();\n}\n\nfunction applyAdjustments() {\nif (!originalImageData) return;\nconst imgData = new ImageData(\nnew Uint8ClampedArray(originalImageData.data),\noriginalImageData.width,\noriginalImageData.height\n);\nconst data = imgData.data;\nconst {exposure, contrast, highlights, shadows, whites, blacks} = state;\nfor (let i = 0; i < data.length; i += 4) {\nlet r = data[i] / 255;\nlet g = data[i+1] / 255;\nlet b = data[i+2] / 255;\n// \u4eae\u5ea6\nconst lum = 0.2126*r + 0.7152*g + 0.0722*b;\n// \u66dd\u5149\uff1a2^EV\nconst evFactor = Math.pow(2, exposure);\nr *= evFactor; g *= evFactor; b *= evFactor;\n// \u5bf9\u6bd4\u5ea6\nconst cFactor = contrast + 1;\nr = (r - 0.5) * cFactor + 0.5;\ng = (g - 0.5) * cFactor + 0.5;\nb = (b - 0.5) * cFactor + 0.5;\n// \u9ad8\u5149/\u9634\u5f71\nif (lum > 0.5) {\nconst factor = (lum - 0.5) * 2;\nr += highlights * factor;\ng += highlights * factor;\nb += highlights * factor;\n} else {\nconst factor = (0.5 - lum) * 2;\nr += shadows * factor;\ng += shadows * factor;\nb += shadows * factor;\n}\n// \u767d\u8272/\u9ed1\u8272\u526a\u5207\nif (lum > 0.8) {\nconst factor = (lum - 0.8) * 5;\nr += whites * factor; g += whites * factor; b += whites * factor;\n}\nif (lum < 0.2) {\nconst factor = (0.2 - lum) * 5;\nr -= blacks * factor; g -= blacks * factor; b -= blacks * factor;\n}\n// \u9650\u5e45\ndata[i]   = Math.min(255, Math.max(0, r * 255));\ndata[i+1] = Math.min(255, Math.max(0, g * 255));\ndata[i+2] = Math.min(255, Math.max(0, b * 255));\n}\n// \u66f4\u65b0\u9884\u89c8\npreviewCtx.putImageData(imgData, 0, 0);\nupdateHistogram(imgData);\n}\n\nfunction updateHistogram(imageData) {\nconst bins = 256;\nconst counts = new Array(bins).fill(0);\nconst data = imageData.data;\nfor (let i = 0; i < data.length; i += 4) {\n// \u7070\u5ea6\u503c\nconst lum = Math.round(0.299*data[i] + 0.587*data[i+1] + 0.114*data[i+2]);\ncounts[lum]++;\n}\nconst labels = counts.map((_,i) => i);\nif (!histChart) {\nhistChart = new Chart(histCtx, {\ntype: 'bar',\ndata: {\nlabels,\ndatasets: [{ label: '\u50cf\u7d20\u6570', data: counts, backgroundColor: 'rgba(0,0,0,0.5)' }]\n},\noptions: {\nresponsive: true,\nscales: { x: { display: false }, y: { beginAtZero: true } },\nplugins: { legend: { display: false } }\n}\n});\n} else {\nhistChart.data.datasets[0].data = counts;\nhistChart.update();\n}\n}\n</script>\n</body>\n</html>\n````\u3002", "top": 0, "createdAt": 1752986980, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-20", "dateLabelColor": "#0969da"}, "P17": {"htmlDir": "docs/post/shai-cha-zhong-fu-huo-lei-si-tu-xiang.html", "labels": ["python"], "postTitle": "\u7b5b\u67e5\u91cd\u590d\u6216\u7c7b\u4f3c\u56fe\u50cf", "postUrl": "post/shai-cha-zhong-fu-huo-lei-si-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/17", "commentNum": 0, "wordCount": 4468, "description": "\u7b5b\u67e5\u91cd\u590d\u6216\u7c7b\u4f3c\u56fe\u50cf\n```\nimport subprocess\nimport sys\nimport os\nimport cv2\nimport numpy as np\nfrom keras.applications.resnet50 import ResNet50, preprocess_input\nfrom sklearn.metrics.pairwise import cosine_similarity  # \u7528\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\n\n# pip \u5b89\u88c5 scikit-learn\ndef install_package(package):\n    try:\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n        print(f'{package} \u5b89\u88c5\u6210\u529f\uff01')\n    except subprocess.CalledProcessError as e:\n        print(f'\u5b89\u88c5\u5931\u8d25: {e}')\n\n# \u786e\u4fdd\u5b89\u88c5 scikit-learn\ninstall_package('scikit-learn')\n\n# \u63d0\u53d6\u56fe\u7247\u7279\u5f81\ndef extract_image_features(image_path):\n    if not os.path.exists(image_path):  # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        print(f'\u6587\u4ef6\u4e0d\u5b58\u5728: {image_path}')\n        return None\n    \n    image = cv2.imread(image_path)  # \u8bfb\u53d6\u56fe\u7247\n    if image is None:  # \u68c0\u67e5\u56fe\u7247\u662f\u5426\u52a0\u8f7d\u6210\u529f\n        print(f'\u65e0\u6cd5\u8bfb\u53d6\u56fe\u7247: {image_path}')\n        return None  # \u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u8fd4\u56deNone\n    image = cv2.resize(image, (256, 256))  # \u7f29\u653e\u56fe\u7247\u5230\u7edf\u4e00\u5c3a\u5bf8\n    image = image[16:240, 16:240]  # \u88c1\u526a\u4e2d\u95f4\u533a\u57df(224x224)\n    \n    image = np.expand_dims(image, axis=0)  # \u6269\u5c55\u7ef4\u5ea6\u4ee5\u5339\u914d\u6a21\u578b\u8f93\u5165\u8981\u6c42\n    image = preprocess_input(image)  # \u9884\u5904\u7406\u56fe\u7247\n    \n    features = model.predict(image)  # \u63d0\u53d6\u7279\u5f81\u5411\u91cf\n    features /= np.linalg.norm(features)  # \u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf\n    \n    print(f'\u7279\u5f81\u5411\u91cf: {features.flatten()}')  # \u6253\u5370\u7279\u5f81\u5411\u91cf\uff0c\u770b\u770b\u662f\u5426\u6709\u5dee\u5f02\n    return features.flatten()  # \u5e73\u94fa\u7279\u5f81\u5411\u91cf\n\n# \u79fb\u52a8\u91cd\u590d\u56fe\u7247\u5230\u6307\u5b9a\u6587\u4ef6\u5939\ndef move_duplicate_images(directory, output_directory, use_cosine_similarity=True):\n    current_dir = directory  # \u4f7f\u7528\u4f20\u5165\u7684\u76ee\u5f55\u8def\u5f84\n    files = [f for f in os.listdir(current_dir) if os.path.isfile(os.path.join(current_dir, f))]  # \u83b7\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\n    \n    image_features = {}\n    moved_count = 0  # \u8bb0\u5f55\u79fb\u52a8\u7684\u56fe\u7247\u6570\u91cf\n    duplicate_pairs = []  # \u7528\u4e8e\u4fdd\u5b58\u91cd\u590d\u56fe\u7247\u7684\u6587\u4ef6\u540d\u5bf9\n\n    # \u786e\u4fdd\u8f93\u51fa\u76ee\u5f55\u5b58\u5728\n    if not os.path.exists(output_directory):  # \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\n        os.makedirs(output_directory)\n\n    for file_name in files:\n        if file_name.endswith('.jpg') or file_name.endswith('.png'):  # \u7b5b\u9009\u51fa\u56fe\u7247\u6587\u4ef6\n            file_path = os.path.join(current_dir, file_name)\n            image_feature = extract_image_features(file_path)\n\n            if image_feature is None:  # \u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u8df3\u8fc7\u6b64\u6587\u4ef6\n                continue\n\n            is_duplicate = False\n            for existing_path, existing_feature in image_features.items():\n                if use_cosine_similarity:\n                    # \u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u76f8\u4f3c\u5ea6\n                    similarity = cosine_similarity([existing_feature], [image_feature])[0][0]\n                    print(f'\u8ba1\u7b97\u76f8\u4f3c\u5ea6: {similarity}')  # \u6253\u5370\u8ba1\u7b97\u51fa\u7684\u76f8\u4f3c\u5ea6\n\n                    if similarity > 0.8:  # \u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c\uff0c\u503c\u8d8a\u63a5\u8fd11\u8bf4\u660e\u8d8a\u76f8\u4f3c\n                        is_duplicate = True\n                        print(f'\u79fb\u52a8\u91cd\u590d\u56fe\u7247: {file_path}')\n                        # \u79fb\u52a8\u6587\u4ef6\u5230\u6307\u5b9a\u6587\u4ef6\u5939\n                        new_path = os.path.join(output_directory, file_name)\n                        os.rename(file_path, new_path)  # \u79fb\u52a8\u6587\u4ef6\n                        moved_count += 1\n                        # \u8bb0\u5f55\u91cd\u590d\u7684\u6587\u4ef6\u540d\u5bf9 (\u5f53\u524d\u6587\u4ef6\u540d\u548c\u5df2\u6709\u6587\u4ef6\u540d)\n                        duplicate_pairs.append((file_name, os.path.basename(existing_path)))\n                        break\n                else:\n                    # \u4f7f\u7528\u6b27\u6c0f\u8ddd\u79bb\u8ba1\u7b97\u76f8\u4f3c\u5ea6\n                    distance = np.linalg.norm(existing_feature - image_feature)  # \u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\n                    print(f'\u8ba1\u7b97\u8ddd\u79bb: {distance}')  # \u6253\u5370\u8ba1\u7b97\u51fa\u7684\u6b27\u6c0f\u8ddd\u79bb\n                    if distance < 0.6:  # \u5220\u9664\u7c7b\u4f3c\u56fe\u50cf 0.6  \u5220\u9664\u91cd\u590d\u56fe\u50cf 0.1\n                        is_duplicate = True\n                        print(f'\u79fb\u52a8\u91cd\u590d\u56fe\u7247: {file_path}')\n                        # \u79fb\u52a8\u6587\u4ef6\u5230\u6307\u5b9a\u6587\u4ef6\u5939\n                        new_path = os.path.join(output_directory, file_name)\n                        os.rename(file_path, new_path)  # \u79fb\u52a8\u6587\u4ef6\n                        moved_count += 1\n                        # \u8bb0\u5f55\u91cd\u590d\u7684\u6587\u4ef6\u540d\u5bf9 (\u5f53\u524d\u6587\u4ef6\u540d\u548c\u5df2\u6709\u6587\u4ef6\u540d)\n                        duplicate_pairs.append((file_name, os.path.basename(existing_path)))\n                        break\n\n            if not is_duplicate:\n                image_features[file_path] = image_feature\n\n    # \u5c06\u91cd\u590d\u56fe\u7247\u6587\u4ef6\u540d\u5bf9\u4fdd\u5b58\u5230txt\u6587\u4ef6\n    output_file = os.path.join(output_directory, 'duplicate_images.txt')  # \u8bbe\u7f6e\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n    if duplicate_pairs:\n        with open(output_file, 'w') as f:\n            for file1, file2 in duplicate_pairs:\n                f.write(f'{file1} \u4e0e {file2} \u91cd\u590d\u6216\u7c7b\u4f3c\\n')\n\n    print('\u5df2\u79fb\u52a8 {} \u5f20\u91cd\u590d\u56fe\u7247'.format(moved_count))\n\n# \u52a0\u8f7d\u9884\u8bad\u7ec3\u7684ResNet50\u6a21\u578b\nmodel = ResNet50(weights='imagenet', include_top=False, pooling='avg')\n\n# \u6307\u5b9a\u76ee\u5f55\u8def\u5f84\uff0c\u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\ninput_directory = r'D:\\test\\img'  # \u56fe\u7247\u6240\u5728\u6587\u4ef6\u5939\noutput_directory = r'D:\\test\\img2'  # \u81ea\u5b9a\u4e49\u4fdd\u5b58\u91cd\u590d\u56fe\u7247\u7684\u6587\u4ef6\u5939\n\nmove_duplicate_images(input_directory, output_directory, use_cosine_similarity=False)  # \u8bbe\u7f6e\u4e3aTrue\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5224\u65ad\u4e24\u4e2a\u56fe\u7247\u7684\u7279\u5f81\u65b9\u5411\u662f\u5426\u76f8\u4f3c\uff0c\u8bbe\u7f6e\u4e3aFalse\u79fb\u9664\u91cd\u590d\u56fe\u50cf\n```\u3002", "top": 0, "createdAt": 1753246065, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-23", "dateLabelColor": "#0969da"}, "P18": {"htmlDir": "docs/post/shi-pin-ti-qu-tu-xiang.html", "labels": ["python"], "postTitle": "\u89c6\u9891\u63d0\u53d6\u56fe\u50cf", "postUrl": "post/shi-pin-ti-qu-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/18", "commentNum": 0, "wordCount": 1868, "description": "\u89c6\u9891\u63d0\u53d6\u56fe\u50cf\n```\nimport cv2\nimport os\n\ndef extract_frames(video_path, output_folder):\n    # \u83b7\u53d6\u89c6\u9891\u6587\u4ef6\u540d\u5e76\u7528\u4f5c\u8f93\u51fa\u6587\u4ef6\u5939\u7684\u540d\u79f0\uff08\u53bb\u6389\u6269\u5c55\u540d\uff09\n    video_name = os.path.splitext(os.path.basename(video_path))[0]\n    video_output_folder = os.path.join(output_folder, video_name)\n    \n    # \u521b\u5efa\u8f93\u51fa\u6587\u4ef6\u5939\uff08\u5982\u679c\u4e0d\u5b58\u5728\uff09\n    os.makedirs(video_output_folder, exist_ok=True)\n\n    # \u6253\u5f00\u89c6\u9891\u6587\u4ef6\n    cap = cv2.VideoCapture(video_path)\n    if not cap.isOpened():\n        print(f'\u65e0\u6cd5\u6253\u5f00\u89c6\u9891\u6587\u4ef6\uff1a{video_path}')\n        return\n\n    # \u83b7\u53d6\u89c6\u9891\u7684\u5e27\u7387\uff08FPS\uff09\n    fps = cap.get(cv2.CAP_PROP_FPS)\n    print(f'\u89c6\u9891\u5e27\u7387\uff1a{fps} FPS')\n\n    # \u83b7\u53d6\u89c6\u9891\u7684\u603b\u5e27\u6570\n    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    print(f'\u89c6\u9891\u603b\u5e27\u6570\uff1a{total_frames}')\n\n    # \u904d\u5386\u89c6\u9891\u4e2d\u7684\u6bcf\u4e00\u5e27\n    for frame_num in range(total_frames):\n        ret, frame = cap.read()\n        if not ret:\n            print(f'\u65e0\u6cd5\u8bfb\u53d6\u7b2c {frame_num} \u5e27')\n            break\n\n        # \u6bcf\u79d2\u63d0\u53d6\u4e00\u5e27\n        if frame_num % int(fps) == 0:\n            # \u83b7\u53d6\u5f53\u524d\u5e27\u7684\u65f6\u95f4\u6233\uff08\u79d2\uff09\n            timestamp = frame_num // int(fps)\n            # \u6784\u9020\u8f93\u51fa\u56fe\u50cf\u7684\u6587\u4ef6\u8def\u5f84\n            output_path = os.path.join(video_output_folder, f'frame_{timestamp:04d}.jpg')\n            # \u4fdd\u5b58\u5f53\u524d\u5e27\u4e3a\u56fe\u50cf\u6587\u4ef6\n            if frame is not None:\n                cv2.imwrite(output_path, frame)\n                print(f'\u5df2\u4fdd\u5b58\uff1a{output_path}')\n            else:\n                print(f'\u7b2c {timestamp} \u79d2\u56fe\u50cf\u4e3a\u7a7a\uff0c\u8df3\u8fc7\u4fdd\u5b58\u3002", "top": 0, "createdAt": 1753246200, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-23", "dateLabelColor": "#0969da"}, "P19": {"htmlDir": "docs/post/shai-chu-wen-jian-zhi-ding-bi-li-de-wen-jian.html", "labels": ["python"], "postTitle": "\u7b5b\u51fa\u6587\u4ef6\u6307\u5b9a\u6bd4\u4f8b\u7684\u6587\u4ef6", "postUrl": "post/shai-chu-wen-jian-zhi-ding-bi-li-de-wen-jian.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/19", "commentNum": 0, "wordCount": 1098, "description": "\u7b5b\u51fa\u6587\u4ef6\u6307\u5b9a\u6bd4\u4f8b\u7684\u6587\u4ef6\n```\nimport os\nimport shutil\nimport random\n\n# \u8bbe\u7f6e\u6e90\u76ee\u5f55\u548c\u76ee\u6807\u76ee\u5f55\nsource_dir = r'G:\\trian'\ntarget_dir = r'G:\\test'\nmove_percent = 10  # \u767e\u5206\u6bd4\n\n# \u904d\u5386\u4e00\u7ea7\u5b50\u6587\u4ef6\u5939\nfor subfolder in os.listdir(source_dir):\n    subfolder_path = os.path.join(source_dir, subfolder)\n    if not os.path.isdir(subfolder_path):\n        continue  # \u8df3\u8fc7\u975e\u6587\u4ef6\u5939\u9879\n\n    # \u6536\u96c6\u8be5\u5b50\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\uff08\u9012\u5f52\uff09\n    all_files = []\n    for root, _, files in os.walk(subfolder_path):\n        for file in files:\n            full_path = os.path.join(root, file)\n            all_files.append(full_path)\n\n    # \u968f\u673a\u9009\u53d6\u767e\u5206\u6bd4\u6587\u4ef6\n    total = len(all_files)\n    if total == 0:\n        continue\n\n    move_count = max(1, int(total * move_percent / 100))\n    selected_files = random.sample(all_files, move_count)\n\n    # \u6267\u884c\u79fb\u52a8\n    for file_path in selected_files:\n        rel_path = os.path.relpath(file_path, source_dir)\n        dest_path = os.path.join(target_dir, rel_path)\n        os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n        shutil.move(file_path, dest_path)\n        print(f'Moved: {file_path} \u2192 {dest_path}')\n\nprint(f'\\n\u2705 \u6bcf\u4e2a\u5b50\u6587\u4ef6\u5939\u5df2\u968f\u673a\u79fb\u52a8\u7ea6 {move_percent}% \u6587\u4ef6\u3002", "top": 0, "createdAt": 1753246297, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-23", "dateLabelColor": "#0969da"}, "P20": {"htmlDir": "docs/post/yu-yan-mo-xing--API--pi-liang-sheng-cheng-wen-ben.html", "labels": ["python"], "postTitle": "\u8bed\u8a00\u6a21\u578b-API-\u6279\u91cf\u751f\u6210\u6587\u672c", "postUrl": "post/yu-yan-mo-xing--API--pi-liang-sheng-cheng-wen-ben.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/20", "commentNum": 0, "wordCount": 20948, "description": "\u6587\u672c\u6a21\u578b\u6279\u91cf\u751f\u6210\u6587\u672c\u6d4b\u8bd5\n\n## ChatGPT \n\n\u7b2c\u4e09\u65b9\u4ee3\u7406\u63a5\u53e3\n\n-  [https://openkey.cloud](https://openkey.cloud/register?aff=22CVF)\n\n### \u6267\u884c\u811a\u672c\n```\nfrom openai import OpenAI\nimport time\nimport csv\nimport os\nfrom datetime import datetime\n\n# \u521d\u59cb\u5316\u5ba2\u6237\u7aef\nclient = OpenAI(\n    api_key='sk-x',\n    base_url='https://openkey.cloud/v1'\n)\n\nprimary_classes = [\n    '\u6848\u4ef6\u6848\u4f8b', '\u535a\u5ba2\u6587\u7ae0', '\u4e2a\u4eba\u65e5\u8bb0', '\u89c2\u70b9', '\u5e7f\u544a\u6587\u6848', '\u6280\u672f\u6587\u6863',\n    '\u8bc4\u8bba', '\u6563\u6587', '\u793e\u4ea4\u5a92\u4f53\u5e16\u5b50', '\u8bd7\u6b4c', '\u5c0f\u8bf4\u7247\u6bb5', '\u65b0\u95fb\u62a5\u9053', '\u5b66\u672f\u8bba\u6587\u6458\u8981'\n]\n\nsecondary_classes = [\n    'AI', '\u52a8\u7269', '\u60c5\u611f', '\u516c\u76ca', '\u8d2d\u7269', '\u53e4\u4ee3\u6587\u660e', '\u4ea4\u901a', '\u6559\u80b2', '\u8fd1\u4ee3\u6218\u4e89', '\u7ecf\u6d4e',\n    '\u79d1\u5e7b', '\u79d1\u6280', '\u79d1\u666e', '\u5386\u53f2', '\u65c5\u884c', '\u7f8e\u98df', '\u6bcd\u5a74', '\u5947\u5e7b', '\u6c14\u5019\u53d8\u5316', '\u4e09\u519c',\n    '\u793e\u4f1a\u95ee\u9898', '\u6444\u5f71', '\u751f\u6d3b', '\u65f6\u5c1a', '\u65f6\u653f', '\u4f53\u80b2', '\u6587\u5316', '\u6b66\u5668', '\u6821\u56ed', '\u533b\u7597',\n    '\u827a\u672f', '\u97f3\u4e50', '\u5f71\u89c6', '\u6e38\u620f', '\u5a31\u4e50', '\u80b2\u513f', '\u804c\u573a', '\u690d\u7269', '\u5546\u4e1a'\n]\n\nstyles = ['\u6b63\u5f0f', '\u53d9\u4e8b', '\u60c5\u611f\u5316', '\u79d1\u666e']\n\ncategory_map = {\n    '\u6848\u4ef6\u6848\u4f8b': 'Case Study',\n    '\u535a\u5ba2\u6587\u7ae0': 'Blog Article',\n    '\u4e2a\u4eba\u65e5\u8bb0': 'Personal Diary',\n    '\u89c2\u70b9': 'Opinion',\n    '\u5e7f\u544a\u6587\u6848': 'Advertising Copy',\n    '\u6280\u672f\u6587\u6863': 'Technical Document',\n    '\u8bc4\u8bba': 'Review',\n    '\u6563\u6587': 'Essay',\n    '\u793e\u4ea4\u5a92\u4f53\u5e16\u5b50': 'Social Media Post',\n    '\u8bd7\u6b4c': 'Poetry',\n    '\u5c0f\u8bf4\u7247\u6bb5': 'Fiction Excerpt',\n    '\u65b0\u95fb\u62a5\u9053': 'News Report',\n    '\u5b66\u672f\u8bba\u6587\u6458\u8981': 'Academic Abstract',\n    'AI': 'Artificial Intelligence',\n    '\u52a8\u7269': 'Animals',\n    '\u60c5\u611f': 'Emotion',\n    '\u516c\u76ca': 'Public Welfare',\n    '\u8d2d\u7269': 'Shopping',\n    '\u53e4\u4ee3\u6587\u660e': 'Ancient Civilization',\n    '\u4ea4\u901a': 'Transportation',\n    '\u6559\u80b2': 'Education',\n    '\u8fd1\u4ee3\u6218\u4e89': 'Modern War',\n    '\u7ecf\u6d4e': 'Economics',\n    '\u79d1\u5e7b': 'Science Fiction',\n    '\u79d1\u6280': 'Technology',\n    '\u79d1\u666e': 'Popular Science',\n    '\u5386\u53f2': 'History',\n    '\u65c5\u884c': 'Travel',\n    '\u7f8e\u98df': 'Cuisine',\n    '\u6bcd\u5a74': 'Mother and Baby',\n    '\u5947\u5e7b': 'Fantasy',\n    '\u6c14\u5019\u53d8\u5316': 'Climate Change',\n    '\u4e09\u519c': 'Agriculture and Rural Affairs',\n    '\u793e\u4f1a\u95ee\u9898': 'Social Issues',\n    '\u6444\u5f71': 'Photography',\n    '\u751f\u6d3b': 'Lifestyle',\n    '\u65f6\u5c1a': 'Fashion',\n    '\u65f6\u653f': 'Current Politics',\n    '\u4f53\u80b2': 'Sports',\n    '\u6587\u5316': 'Culture',\n    '\u6b66\u5668': 'Weapons',\n    '\u6821\u56ed': 'Campus',\n    '\u533b\u7597': 'Medical',\n    '\u827a\u672f': 'Art',\n    '\u97f3\u4e50': 'Music',\n    '\u5f71\u89c6': 'Film and TV',\n    '\u6e38\u620f': 'Gaming',\n    '\u5a31\u4e50': 'Entertainment',\n    '\u80b2\u513f': 'Parenting',\n    '\u804c\u573a': 'Workplace',\n    '\u690d\u7269': 'Plants',\n    '\u5546\u4e1a': 'Business',\n    '\u6b63\u5f0f': 'Formal',\n    '\u53d9\u4e8b': 'Narrative',\n    '\u60c5\u611f\u5316': 'Emotional',\n    '\u79d1\u666e': 'Popular Science'\n}\n\ndef char_count(text: str) -> int:\n    return len(text)\n\ndef generate_text(primary, secondary, style, max_retries=3):\n    primary_en = category_map.get(primary, primary)\n    secondary_en = category_map.get(secondary, secondary)\n    style_en = category_map.get(style, style)\n\n    prompt = (\n        f'Please write a coherent, well-structured English text with at least 250 characters and preferably no more than 350 characters about the following:\\n'\n        f'Primary category: {primary_en}\\n'\n        f'Secondary category: {secondary_en}\\n'\n        f'Writing style: {style_en}\\n'\n        f'Important: The entire text must be in English without any Chinese characters or words.'\n    )\n    text = ''\n    for attempt in range(1, max_retries + 1):\n        try:\n            response = client.chat.completions.create(\n                model='gpt-4o-mini',\n                messages=[{'role': 'user', 'content': prompt}],\n                temperature=0.7,\n                max_tokens=900\n            )\n            text = response.choices[0].message.content.strip()\n            char_num = char_count(text)\n            if char_num >= 250:\n                return text\n            else:\n                print(f'Retry {attempt} for {primary}-{secondary}-{style}, char count {char_num} < 250')\n                time.sleep(1)\n        except Exception as e:\n            print(f'Error for {primary}-{secondary}-{style}: {e}')\n            time.sleep(2)\n    print(f'Max retries reached for {primary}-{secondary}-{style}, returning last result')\n    return text\n\ndef write_to_csv_with_timestamp(base_name, rows, batch_size, output_dir='D:/data/output'):\n    os.makedirs(output_dir, exist_ok=True)\n    now_str = datetime.now().strftime('%Y%m%d%H%M')\n    filename = f'{base_name}_{now_str}_{batch_size}.csv'\n    full_path = os.path.join(output_dir, filename)\n    with open(full_path, 'w', newline='', encoding='utf-8-sig') as f:\n        writer = csv.writer(f)\n        writer.writerow(['\u7f16\u53f7', '\u4e00\u7ea7\u7c7b', '\u4e8c\u7ea7\u7c7b', '\u98ce\u683c', '\u5185\u5bb9', '\u5b57\u7b26\u6570'])\n        writer.writerows(rows)\n    print(f'Saved batch of {len(rows)} records to {full_path}')\n\ndef main():\n    total_tasks = len(primary_classes) * len(secondary_classes) * len(styles)\n    task_counter = 0\n    batch_size = 5  # \u751f\u62105\u6761\u4fdd\u5b58\u6210\u8868\n    buffer = []\n    base_name = 'generated_texts'\n    output_dir = r'C:\\test'  # \u4f60\u9700\u8981\u7684\u8f93\u51fa\u76ee\u5f55\uff0c\u8bf7\u4fee\u6539\u4e3a\u4f60\u60f3\u8981\u7684\u8def\u5f84\n\n    for primary in primary_classes:\n        for secondary in secondary_classes:\n            for style in styles:\n                task_counter += 1\n                print(f'\\n[{task_counter}/{total_tasks}] Generating: {primary} - {secondary} - {style}\\n')\n                content = generate_text(primary, secondary, style)\n                char_num = char_count(content)\n                print(f'Content ({char_num} chars):\\n')\n                print(content)\n                print('\\n' + '='*80 + '\\n')\n\n                buffer.append([task_counter, primary, secondary, style, content, char_num])\n\n                if len(buffer) >= batch_size:\n                    write_to_csv_with_timestamp(base_name, buffer, batch_size, output_dir=output_dir)\n                    buffer.clear()\n\n                time.sleep(1)  # \u9650\u6d41\u9632\u5c01\u7981\n\n    if buffer:\n        write_to_csv_with_timestamp(base_name, buffer, len(buffer), output_dir=output_dir)\n\n    print('All done!')\n\nif __name__ == '__main__':\n    main()\n```\n### \u8f93\u51fa\u7ed3\u679c\n```\n[354/2028] Generating: \u4e2a\u4eba\u65e5\u8bb0 - \u79d1\u5e7b - \u53d9\u4e8b\nGenerated chars: 400\nFull content:\nOctober 12, 2147\n\nToday, I stumbled upon an ancient device in the ruins of an old library\u2014an old smartphone. Its screen flickered to life, revealing images of a world long gone. I felt a surge of nostalgia for a time when humans thrived on connection, not just data. As I scrolled through its apps, I wondered what stories lay hidden in its memory, waiting to bridge the gap between past and present.\n```\n\n## DeepSeek\n- [https://platform.deepseek.com/api_keys](https://platform.deepseek.com/api_keys)\n### \u8fd0\u884c\u811a\u672c\n```\nfrom openai import OpenAI\nimport time\nimport csv\nimport os\nfrom datetime import datetime\n\n# \u521d\u59cb\u5316\u5ba2\u6237\u7aef\uff0c\u66ff\u6362\u6210 DeepSeek \u7684 base_url \u548c api_key\nclient = OpenAI(\n    api_key='sk-x',  # \u8fd9\u91cc\u6362\u6210\u4f60\u5728 DeepSeek \u7533\u8bf7\u7684 API Key\n    base_url='https://api.deepseek.com'    # DeepSeek API \u5730\u5740\uff0c\u5e26/v1\u4e5f\u53ef\u4ee5\n)\n\nprimary_classes = [\n    '\u6848\u4ef6\u6848\u4f8b', '\u535a\u5ba2\u6587\u7ae0', '\u4e2a\u4eba\u65e5\u8bb0', '\u89c2\u70b9', '\u5e7f\u544a\u6587\u6848', '\u6280\u672f\u6587\u6863',\n    '\u8bc4\u8bba', '\u6563\u6587', '\u793e\u4ea4\u5a92\u4f53\u5e16\u5b50', '\u8bd7\u6b4c', '\u5c0f\u8bf4\u7247\u6bb5', '\u65b0\u95fb\u62a5\u9053', '\u5b66\u672f\u8bba\u6587\u6458\u8981'\n]\n\nsecondary_classes = [\n    'AI', '\u52a8\u7269', '\u60c5\u611f', '\u516c\u76ca', '\u8d2d\u7269', '\u53e4\u4ee3\u6587\u660e', '\u4ea4\u901a', '\u6559\u80b2', '\u8fd1\u4ee3\u6218\u4e89', '\u7ecf\u6d4e',\n    '\u79d1\u5e7b', '\u79d1\u6280', '\u79d1\u666e', '\u5386\u53f2', '\u65c5\u884c', '\u7f8e\u98df', '\u6bcd\u5a74', '\u5947\u5e7b', '\u6c14\u5019\u53d8\u5316', '\u4e09\u519c',\n    '\u793e\u4f1a\u95ee\u9898', '\u6444\u5f71', '\u751f\u6d3b', '\u65f6\u5c1a', '\u65f6\u653f', '\u4f53\u80b2', '\u6587\u5316', '\u6b66\u5668', '\u6821\u56ed', '\u533b\u7597',\n    '\u827a\u672f', '\u97f3\u4e50', '\u5f71\u89c6', '\u6e38\u620f', '\u5a31\u4e50', '\u80b2\u513f', '\u804c\u573a', '\u690d\u7269', '\u5546\u4e1a'\n]\n\nstyles = ['\u6b63\u5f0f', '\u53d9\u4e8b', '\u60c5\u611f\u5316', '\u79d1\u666e']\n\ndef generate_text(primary: str, secondary: str, style: str, max_retries=3) -> str:\n    prompt = (\n        f'Please write an English text about the following topic.\\n'\n        f'The text must be coherent and well-structured,\\n'\n        f'with at least 200 characters. Avoid making the text too long.\\n\\n'\n        f'Primary category: {primary}\\n'\n        f'Secondary category: {secondary}\\n'\n        f'Writing style: {style}'\n    )\n    text = ''\n    for attempt in range(1, max_retries + 1):\n        try:\n            response = client.chat.completions.create(\n                model='deepseek-chat',\n                messages=[{'role': 'user', 'content': prompt}],\n                temperature=0.7,\n                max_tokens=500  # \u5141\u8bb8\u7a0d\u957f\u6587\u672c\uff0c\u6a21\u578b\u81ea\u52a8\u63a7\u5236\u957f\u5ea6\n            )\n            text = response.choices[0].message.content.strip()\n            length = len(text)\n            if length >= 200:\n                return text.replace('\\n', ' ')\n            else:\n                print(f'Retry {attempt} for {primary} - {secondary} - {style}: char count {length} < 200')\n                time.sleep(1)\n        except Exception as e:\n            print(f'Error on {primary} - {secondary} - {style}: {e}')\n            time.sleep(2)\n\n    print(f'Max retries reached for {primary} - {secondary} - {style}. Returning last result.')\n    if text:\n        return text.replace('\\n', ' ')\n    return ''\n\ndef save_batch_to_csv(rows, batch_num, base_name='deepseek_output', output_dir='output'):\n    os.makedirs(output_dir, exist_ok=True)\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n    filename = f'{base_name}_{timestamp}_batch{batch_num}.csv'\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, mode='w', encoding='utf-8-sig', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['\u7f16\u53f7', '\u4e00\u7ea7\u7c7b', '\u4e8c\u7ea7\u7c7b', '\u98ce\u683c', '\u5185\u5bb9', '\u5b57\u7b26\u6570'])\n        writer.writerows(rows)\n    print(f'Saved batch {batch_num} with {len(rows)} records to {filepath}')\n\ndef main():\n    total_tasks = len(primary_classes) * len(secondary_classes) * len(styles)\n    task_counter = 0\n    batch_size = 5  # \u751f\u62105\u6761\u4fdd\u5b58\u6210\u8868\n    batch_data = []\n    batch_number = 1\n    base_name = 'deepseek_output'\n    output_dir = r'c:\\test'  # \u4fee\u6539\u6210\u4f60\u60f3\u4fdd\u5b58\u7684\u8def\u5f84\n\n    for primary in primary_classes:\n        for secondary in secondary_classes:\n            for style in styles:\n                task_counter += 1\n                print(f'\\n[{task_counter}/{total_tasks}] Generating: {primary} - {secondary} - {style}\\n')\n                content = generate_text(primary, secondary, style)\n                length = len(content)\n                print(f'Content ({length} characters):\\n')\n                print(content)\n                print('\\n' + '='*100 + '\\n')\n\n                batch_data.append([task_counter, primary, secondary, style, content, length])\n\n                if len(batch_data) >= batch_size:\n                    save_batch_to_csv(batch_data, batch_number, base_name, output_dir)\n                    batch_data.clear()\n                    batch_number += 1\n\n                time.sleep(1)  # \u907f\u514d\u8bf7\u6c42\u8fc7\u5feb\u88ab\u9650\u6d41\n\n    if batch_data:\n        save_batch_to_csv(batch_data, batch_number, base_name, output_dir)\n\n    print('All tasks completed.')\n\nif __name__ == '__main__':\n    main()\n```\n### \u8f93\u51fa\u7ed3\u679c\n```\n[15/2028] Generating: \u6848\u4ef6\u6848\u4f8b - \u516c\u76ca - \u60c5\u611f\u5316\n\nContent (827 characters):\n\n**A Beacon of Hope: The Power of Compassion in Legal Cases**    In the midst of cold courtrooms and rigid laws, some cases shine as reminders of humanity\u2019s warmth. Take the story of an elderly woman evicted unfairly\u2014her plight moved strangers to crowdfund her legal fees. Or the pro bono lawyers who fought for a child\u2019s right to education against all odds. These stories aren\u2019t just about justice; they\u2019re about hearts uniting to lift others up.    Every such case whispers a truth: the law is stronger when wrapped in kindness. Behind every docket number is a life, and behind every verdict, a chance to heal. Let\u2019s celebrate these unsung heroes\u2014the donors, volunteers, and advocates\u2014who turn legal battles into triumphs of empathy. Because justice, when paired with love, doesn\u2019t just win\u2014it transforms.    (Characters: 598)\n```\n## Kimi \n\n-  [https://platform.moonshot.cn/console/api-keys](https://platform.moonshot.cn/console/api-keys)\n\n### \u6267\u884c\u811a\u672c\n```\nfrom openai import OpenAI\nimport time\nimport csv\nimport os\nfrom datetime import datetime\n\n# === \u6a21\u578b\u9009\u62e9 ===\nUSE_MODEL = 'moonshot'\n\n# === \u521d\u59cb\u5316\u5ba2\u6237\u7aef\uff08Moonshot \u4e2d\u6587\uff09===\nclient = OpenAI(\n    api_key='sk-xxx',  # \u2190 \u66ff\u6362\u4e3a\u4f60\u7684 API Key\n    base_url='https://api.moonshot.cn/v1'\n)\n\n\n\nmodel_name = 'kimi-k2-0711-preview'\nsystem_prompt = (\n    '\u4f60\u662f Kimi\uff0c\u7531 Moonshot AI \u63d0\u4f9b\u7684\u4eba\u5de5\u667a\u80fd\u52a9\u624b\u3002", "top": 0, "createdAt": 1753366308, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-24", "dateLabelColor": "#0969da"}, "P21": {"htmlDir": "docs/post/wen-ben-xing-zhuan-biao-lie.html", "labels": ["python"], "postTitle": "\u6587\u672c\u884c\u8f6c\u8868\u5217", "postUrl": "post/wen-ben-xing-zhuan-biao-lie.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/21", "commentNum": 0, "wordCount": 6299, "description": "\n### \u8fd0\u884c\u811a\u672c\n```\nimport sys\nimport subprocess\nimport os\nimport re\n\n# \u81ea\u52a8\u5b89\u88c5\u5305\u7684\u51fd\u6570\ndef install_package(package):\n    try:\n        __import__(package)\n    except ImportError:\n        print(f'\u7f3a\u5c11\u5305 {package}\uff0c\u6b63\u5728\u5b89\u88c5...')\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n        print(f'{package} \u5b89\u88c5\u5b8c\u6210\u3002", "top": 0, "createdAt": 1753368983, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-24", "dateLabelColor": "#0969da"}, "P22": {"htmlDir": "docs/post/duo-ge-biao-he-bing.html", "labels": ["python"], "postTitle": "\u591a\u4e2a\u8868\u5408\u5e76", "postUrl": "post/duo-ge-biao-he-bing.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/22", "commentNum": 0, "wordCount": 393, "description": "### \u591a\u5f20\u683c\u5f0f\u4e00\u6837\u7684\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u8868\n```\nimport pandas as pd\nimport os\n\n# \u8bbe\u7f6e\u6587\u4ef6\u5939\u8def\u5f84\nfolder_path = r'D:\\hb  # \u66ff\u6362\u4e3a\u4f60\u7684CSV\u6587\u4ef6\u5939\u8def\u5f84\n\n# \u83b7\u53d6\u6240\u6709 CSV \u6587\u4ef6\u8def\u5f84\ncsv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]\n\n# \u5408\u5e76\u6240\u6709 CSV \u6587\u4ef6\ndf_list = [pd.read_csv(os.path.join(folder_path, f)) for f in csv_files]\ncombined_df = pd.concat(df_list, ignore_index=True)\n\n# \u4fdd\u5b58\u4e3a\u4e00\u4e2a\u65b0\u6587\u4ef6\ncombined_df.to_csv(r'D:\\hb.csv', index=False)\n\n```\u3002", "top": 0, "createdAt": 1753679108, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-28", "dateLabelColor": "#0969da"}, "P23": {"htmlDir": "docs/post/Kontext--ti-shi-ci.html", "labels": ["documentation"], "postTitle": "Kontext-\u63d0\u793a\u8bcd", "postUrl": "post/Kontext--ti-shi-ci.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/23", "commentNum": 0, "wordCount": 879, "description": "\n\n- [https://huggingface.co/spaces/kontext-community](https://huggingface.co/spaces/kontext-community/FLUX.1-Kontext-multi-image)\n\n## \u8001\u7167\u7247\u4fee\u590d\n```\nrestore and colorize this photo. Repair the damaged white background. Maintain the consistency between the characters and the background\n```\n\n- https://zhuanlan.zhihu.com/p/1922042108895797435\n\n\u9700\u6c42\u7c7b\u578b | \u82f1\u6587\u6a21\u677f | \u4e2d\u6587\u89e3\u6790\n-- | -- | --\n\u5bf9\u8c61\u4fee\u6539 | 'Change [object] to [new state], keep [content to preserve] unchanged' | \u66f4\u6539 [\u5177\u4f53\u5bf9\u8c61] \u4e3a [\u65b0\u7684\u72b6\u6001]\uff0c\u540c\u65f6\u4fdd\u6301 [\u9700\u8981\u4fdd\u7559\u7684\u5185\u5bb9] \u4e0d\u53d8\u3002", "top": 0, "createdAt": 1753869777, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-07-30", "dateLabelColor": "#0969da"}, "P24": {"htmlDir": "docs/post/zhi-ding-wen-jian-jia-zhong-ming-ming.html", "labels": ["python"], "postTitle": "\u6307\u5b9a\u6587\u4ef6\u5939\u91cd\u547d\u540d", "postUrl": "post/zhi-ding-wen-jian-jia-zhong-ming-ming.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/24", "commentNum": 0, "wordCount": 1370, "description": "\u6307\u5b9a\u6587\u4ef6\u5939\u5305\u542b\u5b50\u6587\u4ef6\u5939\u91cd\u547d\u540d\n```\nimport os\nimport shutil\nimport uuid\n\ndef rename_image_files(directory, prefix='Real_'):\n    '''\n    \u904d\u5386\u76ee\u5f55\u53ca\u5b50\u76ee\u5f55\uff0c\u6279\u91cf\u91cd\u547d\u540d\u56fe\u50cf/\u89c6\u9891\u6587\u4ef6\u4e3a \u524d\u7f00+\u7f16\u53f7\uff0c\u907f\u514d\u91cd\u590d\u3001\u8986\u76d6\u3001\u9057\u6f0f\u3002", "top": 0, "createdAt": 1754627049, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-08", "dateLabelColor": "#0969da"}, "P25": {"htmlDir": "docs/post/deepseek-chat--gui-gu-shi---wu-zhong-xiang.html", "labels": ["python", "realfake.top"], "postTitle": "deepseek-chat-\u9b3c\u6545\u4e8b-\u96fe\u949f\u5df7", "postUrl": "post/deepseek-chat--gui-gu-shi---wu-zhong-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/25", "commentNum": 0, "wordCount": 16343, "description": "## \u96fe\u949f\u5df7\n\n### \u6587\u6848  \n\n'\u5f53\u949f\u58f0\u6572\u54cd\u7b2c\u5341\u4e8c\u4e0b\uff0c\u4f60\u4f1a\u542c\u89c1\u81ea\u5df1\u7684\u5fc3\u8df3\u6d88\u5931\u3002", "top": 0, "createdAt": 1754799973, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-10", "dateLabelColor": "#0969da"}, "P26": {"htmlDir": "docs/post/shi-pin-yan-chang.html", "labels": ["python"], "postTitle": "\u89c6\u9891\u5ef6\u957f", "postUrl": "post/shi-pin-yan-chang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/26", "commentNum": 0, "wordCount": 1967, "description": "# \u89c6\u9891\u5ef6\u957f\n\n\u4e0d\u6ee1\u8db3\u5341\u79d2\u7684\u6c34\u5e73\u6b63\u5012\u64ad\u653e\u5ef6\u8fdf\u5341\u79d2\u4ee5\u4e0a\n\n```\nimport os, math\nfrom moviepy.editor import VideoFileClip, concatenate_videoclips, vfx\n\n# === \u914d\u7f6e ===\nINPUT_DIR  = r'D:\\\\1'   # \u5f85\u5904\u7406\u89c6\u9891\u76ee\u5f55\nOUTPUT_DIR = r'D:\\2'   # \u8f93\u51fa\u76ee\u5f55\nTARGET_SEC = 10                      # \u6700\u5c11\u76ee\u6807\u65f6\u957f\uff08\u79d2\uff09\nEXTS = ('.mp4', '.mov', '.avi', '.mkv', '.m4v')\n\nos.makedirs(OUTPUT_DIR, exist_ok=True)\n\ndef build_pingpong_min_duration(clip, min_sec=10):\n    '''\n    \u628a clip \u505a\u6210\u201c\u6b63\u653e+\u5012\u653e\u201d\u4ea4\u66ff\u7684 ping-pong \u5faa\u73af\uff0c\n    \u4e00\u76f4\u62fc\u5230\u65f6\u957f >= min_sec\uff0c\u4e0d\u622a\u65ad\u3002", "top": 0, "createdAt": 1754886705, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-11", "dateLabelColor": "#0969da"}, "P27": {"htmlDir": "docs/post/wei-ruan-ben-di-wen-zi-zhuan-yu-yin.html", "labels": ["python", "html"], "postTitle": "\u5fae\u8f6f\u672c\u5730\u6587\u5b57\u8f6c\u8bed\u97f3", "postUrl": "post/wei-ruan-ben-di-wen-zi-zhuan-yu-yin.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/27", "commentNum": 0, "wordCount": 9281, "description": "## HTML \u7248\u672c\n```\n<!DOCTYPE html>\n<html lang='zh-CN'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>\u6587\u672c\u8f6c\u8bed\u97f3\u5e76\u64ad\u653e</title>\n</head>\n<body>\n    <h1>\u6587\u672c\u8f6c\u8bed\u97f3\u5e76\u64ad\u653e</h1>\n\n    <label for='textInput'>\u8bf7\u8f93\u5165\u6587\u672c\uff1a</label><br>\n    <textarea id='textInput' rows='4' cols='50'></textarea><br><br>\n\n    <label for='filterChinese'>\u53ea\u663e\u793a\u4e2d\u6587\u8bed\u97f3\uff1f</label>\n    <input type='checkbox' id='filterChinese' checked><br><br>\n\n    <label for='voiceSelect'>\u9009\u62e9\u8bed\u97f3\uff08\u97f3\u8272\uff09\uff1a</label>\n    <select id='voiceSelect'></select><br><br>\n\n    <button id='startButton'>\u5f00\u59cb\u6717\u8bfb</button>\n    <button id='stopButton'>\u505c\u6b62\u6717\u8bfb</button>\n\n    <script>\n        // \u83b7\u53d6\u53ef\u7528\u7684\u8bed\u97f3\u5e76\u586b\u5145\u9009\u62e9\u6846\n        function populateVoiceList() {\n            const voices = speechSynthesis.getVoices();\n            const voiceSelect = document.getElementById('voiceSelect');\n            const filterChinese = document.getElementById('filterChinese').checked;\n            voiceSelect.innerHTML = ''; // \u6e05\u7a7a\u73b0\u6709\u9009\u9879\n\n            // \u652f\u6301\u6240\u6709\u8bed\u97f3\uff08\u66f4\u591a\u97f3\u8272\uff09\uff0c\u6216\u53ef\u9009\u8fc7\u6ee4\u4e2d\u6587\n            let filteredVoices = voices;\n            if (filterChinese) {\n                filteredVoices = voices.filter(voice => voice.lang.startsWith('zh-')); // \u652f\u6301 zh-CN, zh-TW \u7b49\n            }\n\n            console.log('\u53ef\u7528\u8bed\u97f3\u5217\u8868:', filteredVoices); // \u8c03\u8bd5\uff1a\u6253\u5370\u5230\u63a7\u5236\u53f0\n\n            if (filteredVoices.length === 0) {\n                // \u5982\u679c\u6ca1\u6709\u8bed\u97f3\uff0c\u663e\u793a\u63d0\u793a\n                const option = document.createElement('option');\n                option.textContent = '\u65e0\u53ef\u7528\u8bed\u97f3\uff08\u8bf7\u5b89\u88c5TTS\u5f15\u64ce\uff09';\n                option.disabled = true;\n                voiceSelect.appendChild(option);\n                alert('\u672a\u68c0\u6d4b\u5230\u4efb\u4f55\u53ef\u7528\u8bed\u97f3\u3002", "top": 0, "createdAt": 1754973430, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-12", "dateLabelColor": "#0969da"}, "P28": {"htmlDir": "docs/post/wen-ben-he-bing.html", "labels": ["python"], "postTitle": "\u6587\u672c\u5408\u5e76", "postUrl": "post/wen-ben-he-bing.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/28", "commentNum": 0, "wordCount": 1972, "description": "##  \u7279\u6b8a\u683c\u5f0f\u6587\u672c\u5408\u5e76\n```\nimport os\nimport chardet  # pip install chardet\n\n# \u6307\u5b9a\u76ee\u5f55\u8def\u5f84\uff08\u4fee\u6539\u4e3a\u4f60\u7684\u76ee\u5f55\uff09\ndirectory = r'D:\\txthb'  # \u793a\u4f8b\uff1ar'D:\\data\\texts'\n\n# \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\noutput_file = os.path.join(directory, 'merged.txt')\nerror_log = os.path.join(directory, 'errors.log')\n\n# \u6269\u5c55\u5e38\u89c1\u7f16\u7801\u5217\u8868\uff0c\u652f\u6301\u66f4\u591a\uff08\u5982\u7e41\u4f53Big5\u3001UTF-16\uff09\ncommon_encodings = ['utf-8', 'gbk', 'utf-8-sig', 'gb2312', 'big5', 'utf-16', 'latin1', 'cp1252']\n\ndef read_file_with_encoding(file_path):\n    # \u5148\u5c1d\u8bd5\u68c0\u6d4b\u7f16\u7801\n    with open(file_path, 'rb') as f:\n        raw_data = f.read()\n        detected = chardet.detect(raw_data)\n        encoding = detected['encoding'] if detected['encoding'] else None\n    \n    # \u5982\u679c\u68c0\u6d4b\u5931\u8d25\uff0c\u9010\u4e2a\u5c1d\u8bd5\u5e38\u89c1\u7f16\u7801\n    if not encoding:\n        for enc in common_encodings:\n            try:\n                with open(file_path, 'r', encoding=enc) as f:\n                    return f.read().strip()\n            except UnicodeDecodeError:\n                continue\n        raise ValueError(f'\u65e0\u6cd5\u8bfb\u53d6\u6587\u4ef6 {file_path}\uff0c\u7f16\u7801\u4e0d\u652f\u6301\u3002", "top": 0, "createdAt": 1754994447, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-12", "dateLabelColor": "#0969da"}, "P29": {"htmlDir": "docs/post/shan-chu-zhong-fu-wen-jian.html", "labels": ["python"], "postTitle": "\u5220\u9664\u91cd\u590d\u6587\u4ef6", "postUrl": "post/shan-chu-zhong-fu-wen-jian.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/29", "commentNum": 0, "wordCount": 1823, "description": "## \u5220\u9664\u91cd\u590d\u6587\u4ef6\n```\nimport os\nimport re\n\n# === \u914d\u7f6e ===\nFOLDER = r'C:\\Users\\1'  # \u76ee\u6807\u76ee\u5f55\nRECURSIVE = False                    # True=\u9012\u5f52\u5b50\u6587\u4ef6\u5939\nDRY_RUN = False                       # True=\u9884\u6f14\uff1b\u786e\u8ba4\u540e\u6539\u4e3a False \u771f\u5220\n\n# \u89c4\u5219\uff1a\u53ea\u8981\u201c\u6587\u4ef6\u540d\uff08\u4e0d\u542b\u6269\u5c55\u540d\uff09\u201d\u91cc\u51fa\u73b0 (\u6570\u5b57) \u5c31\u8ba4\u5b9a\u4e3a\u526f\u672c\n# \u4f8b\uff1aa(1).txt / a (2).txt / a(12) (3).jpg \u90fd\u4f1a\u88ab\u5220\u9664\nPAREN_NUM_IN_STEM = re.compile(r'\\(\\s*\\d+\\s*\\)')\n\ndef iter_files(folder):\n    if RECURSIVE:\n        for root, _, files in os.walk(folder):\n            for f in files:\n                yield root, f\n    else:\n        for f in os.listdir(folder):\n            p = os.path.join(folder, f)\n            if os.path.isfile(p):\n                yield folder, f\n\ndeleted, skipped = 0, 0\n\nfor root, fname in iter_files(FOLDER):\n    stem, ext = os.path.splitext(fname)\n    if ext == '':  # \u65e0\u6269\u5c55\u540d\u4e5f\u6309\u89c4\u5219\u5904\u7406\n        stem = fname\n    if PAREN_NUM_IN_STEM.search(stem):\n        path = os.path.join(root, fname)\n        try:\n            if DRY_RUN:\n                print(f'[\u9884\u6f14] \u5c06\u5220\u9664\uff1a{path}')\n            else:\n                os.remove(path)\n                print(f'\u5df2\u5220\u9664\uff1a{path}')\n            deleted += 1\n        except Exception as e:\n            print(f'\u5220\u9664\u5931\u8d25\uff1a{path}\uff0c\u539f\u56e0\uff1a{e}')\n            skipped += 1\n\nprint(f'\\n\u5b8c\u6210\u3002", "top": 0, "createdAt": 1755180446, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-14", "dateLabelColor": "#0969da"}, "P30": {"htmlDir": "docs/post/zheng-ze-biao-da-shi.html", "labels": ["documentation"], "postTitle": "\u6b63\u5219\u8868\u8fbe\u5f0f", "postUrl": "post/zheng-ze-biao-da-shi.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/30", "commentNum": 0, "wordCount": 1301, "description": "\n# \u6b63\u5219\u8868\u8fbe\u5f0f\u901f\u67e5\u4e0e\u793a\u4f8b\n\n---\n\n## \u57fa\u7840\u5339\u914d\n\n| \u529f\u80fd | \u6b63\u5219 | \u793a\u4f8b\u6587\u672c | \u5339\u914d\u7ed3\u679c |\n|------|------|----------|----------|\n| **\u975e\u6570\u5b57** | `[^0-9]*` | `abc123` | `abc` |\n| **\u975e\u6570\u5b57\uff08\u7b80\u5199\uff09** | `\\D+` | `A9B` | `A` |\n| **n \u4f4d\u6570\u5b57** | `\\d{4}` | `2025-08` | `2025` |\n| **\u81f3\u5c11 n \u4f4d\u6570\u5b57** | `\\d{3,}` | `abc12345xyz` | `12345` |\n| **\u957f\u5ea6 3\u201320 \u7684\u4efb\u610f\u5b57\u7b26** | `.{3,20}` | `hello` | `hello` |\n\n---\n\n## \u591a\u884c\u6a21\u5f0f\uff08`(?m)`\uff09\n\n| \u529f\u80fd | \u6b63\u5219 | \u793a\u4f8b\u6587\u672c | \u5339\u914d\u7ed3\u679c |\n|------|------|----------|----------|\n| **\u6bcf\u884c\u6700\u540e\u4e24\u4e2a\u5b57\u7b26** | `(?m).{2}$` | `abc\\ndefg` | `bc`, `fg` |\n| **\u6bcf\u884c\u5f00\u5934\u4e24\u4e2a\u5b57\u7b26** | `(?m)^.{2}` | `abc\\ndefg` | `ab`, `de` |\n\n---\n\n## \u5b57\u7b26\u7c7b\n\n| \u529f\u80fd | \u6b63\u5219 | \u793a\u4f8b\u6587\u672c | \u5339\u914d\u7ed3\u679c |\n|------|------|----------|----------|\n| **\u4e2d\u6587\u5b57\u7b26** | `[\\u4e00-\\u9fa5]` | `\u4f60\u597d123` | `\u4f60`, `\u597d` |\n| **\u4e2d\u6587\u5b57\u7b26\uff08\u63a8\u8350\uff09** | `\\p{Han}` | `\u6c49\u5b57abc` | `\u6c49`, `\u5b57` |\n| **\u82f1\u6587\u548c\u6570\u5b57** | `[A-Za-z0-9]+` | `abc123!` | `abc123` |\n| **\u6570\u5b57\u3001\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf** | `[A-Za-z0-9_]+` | `abc_123!` | `abc_123` |\n| **\u957f\u5ea6 3\u201320 \u7684\u6570\u5b57/\u5b57\u6bcd/\u4e0b\u5212\u7ebf** | `[A-Za-z0-9_]{3,20}` | `abc_123` | `abc_123` |\n\n---\n\n## \u5e38\u7528\u63d0\u53d6\u89c4\u5219\n\n| \u529f\u80fd | \u6b63\u5219 | \u793a\u4f8b\u6587\u672c | \u5339\u914d\u7ed3\u679c |\n|------|------|----------|----------|\n| **\u5339\u914d `(\u6570\u5b57)`** | `\\(\\d+\\)` | `file(1).txt` | `(1)` |\n| **\u90ae\u7bb1** | `^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$` | `test@example.com` | `test@example.com` |\n| **\u4e2d\u56fd\u5927\u9646\u624b\u673a\u53f7** | `^1[3-9]\\d{9}$` | `13812345678` | `13812345678` |\n\n---\n\n## URL \u5339\u914d\uff08\u53cc\u5f15\u53f7\u5305\u56f4\uff09\n\n1. \u539f\u59cb\u7248\u672c\uff08\u4e0d\u5141\u8bb8\u57df\u540d\u4e2d\u6709 `.`\uff09\n```regex\nhttps?:\\/\\/[^\\s\\/$.?#]+[^\\s]*?(?=')\n```\u3002", "top": 0, "createdAt": 1755182804, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-14", "dateLabelColor": "#0969da"}, "P31": {"htmlDir": "docs/post/shan-chu-zhong-fu-tu-xiang.html", "labels": ["python"], "postTitle": "\u5220\u9664\u91cd\u590d\u56fe\u50cf", "postUrl": "post/shan-chu-zhong-fu-tu-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/31", "commentNum": 0, "wordCount": 1892, "description": "\u5220\u9664\u91cd\u590d\u56fe\u50cf\n## \u5b89\u88c5\u4f9d\u8d56\n```\npip install opencv-python numpy keras tensorflow\n```\n## \u811a\u672c\u7a0b\u5e8f\n```\nimport os\nimport cv2\nimport numpy as np\nfrom keras.applications.resnet50 import ResNet50, preprocess_input\n\n# \u52a0\u8f7dResNet50\u6a21\u578b\u7528\u4e8e\u63d0\u53d6\u56fe\u50cf\u7279\u5f81\nmodel = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\ndef extract_image_features(image_path):\n    image = cv2.imread(image_path)  # \u8bfb\u53d6\u56fe\u7247\n    image = cv2.resize(image, (224, 224))  # \u8c03\u6574\u56fe\u7247\u5927\u5c0f\n    image = np.expand_dims(image, axis=0)  # \u6269\u5c55\u7ef4\u5ea6\n    image = preprocess_input(image)  # \u9884\u5904\u7406\u56fe\u7247\n    \n    features = model.predict(image)  # \u63d0\u53d6\u7279\u5f81\n    features = features.flatten()  # \u5c55\u5e73\u7279\u5f81\u5411\u91cf\n    features /= np.linalg.norm(features)  # \u7279\u5f81\u5411\u91cf\u5f52\u4e00\u5316\n    \n    return features\n\ndef delete_duplicate_images(directory):\n    images = []\n    features = []\n    to_delete = []\n    \n    # \u904d\u5386\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path):\n            try:\n                image_features = extract_image_features(file_path)\n                for i, feature in enumerate(features):\n                    # \u8ba1\u7b97\u56fe\u50cf\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\n                    similarity = np.dot(image_features, feature) / (np.linalg.norm(image_features) * np.linalg.norm(feature))\n                    if similarity > 0.99:  # \u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c\uff0c\u5224\u65ad\u56fe\u7247\u662f\u5426\u76f8\u4f3c\n                        print(f'Found duplicate: {filename} and {images[i]}')\n                        to_delete.append(file_path)\n                        break\n                else:\n                    images.append(filename)\n                    features.append(image_features)\n            except Exception as e:\n                print(f'Error processing {filename}: {e}')\n    \n    # \u5220\u9664\u91cd\u590d\u7684\u56fe\u7247\n    for file_path in to_delete:\n        os.remove(file_path)\n        print(f'Deleted duplicate image: {file_path}')\n\n# \u8bbe\u7f6e\u56fe\u7247\u6587\u4ef6\u5939\u8def\u5f84\ndirectory = r'D:\\test'\ndelete_duplicate_images(directory)\n```\u3002", "top": 0, "createdAt": 1755662922, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-20", "dateLabelColor": "#0969da"}, "P32": {"htmlDir": "docs/post/youtube--shi-pin-yu-lan.html", "labels": ["python", "flask"], "postTitle": "youtube-\u89c6\u9891\u9884\u89c8", "postUrl": "post/youtube--shi-pin-yu-lan.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/32", "commentNum": 0, "wordCount": 1015, "description": "# \ud83c\udfac yt-dlp-youtube-web\n\n\u57fa\u4e8e **Python Flask** \u7684 \u6cb9\u7ba1\u89c6\u9891\u9884\u89c8\uff0c\u4ec5\u4f9b\u6d4b\u8bd5\uff0c\u9002\u914d Cookie \u9a8c\u8bc1\u3002", "top": 0, "createdAt": 1756576481, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-08-31", "dateLabelColor": "#0969da"}, "P33": {"htmlDir": "docs/post/word -he-bing-wen-dang.html", "labels": ["python"], "postTitle": "word \u5408\u5e76\u6587\u6863", "postUrl": "post/word%20-he-bing-wen-dang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/33", "commentNum": 0, "wordCount": 5139, "description": "## \u6587\u6863\u8f6c\u6362docx\u540e\u5408\u5e76\n```\nimport os\nimport sys\nimport time\nimport shutil\nimport subprocess\nfrom pathlib import Path\n\n# ========== \u81ea\u52a8\u5b89\u88c5\u4f9d\u8d56 ==========\ndef install(package_name, import_name=None):\n    try:\n        __import__(import_name or package_name)\n    except ImportError:\n        print(f'\u2699\ufe0f \u6b63\u5728\u5b89\u88c5\u4f9d\u8d56: {package_name} ...')\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package_name])\n\ninstall('python-docx', 'docx')\ninstall('docxcompose', 'docxcompose')\ntry:\n    __import__('win32com.client')\nexcept ImportError:\n    try:\n        install('pywin32', 'win32com')\n    except Exception:\n        pass\n\nfrom docx import Document\nfrom docxcompose.composer import Composer\n\n# ========== \u914d\u7f6e ==========\ninput_dir = r'D:\\doc'            # \u5f85\u5408\u5e76\u76ee\u5f55\uff08\u542b .doc / .docx\uff09\noutput_file = r'D:\\merged.docx'  # \u8f93\u51fa\uff08\u5fc5\u987b .docx\uff09\n\n# ========== \u5b9a\u4f4d soffice.exe ==========\ndef find_soffice_exe():\n    candidates = [\n        r'C:\\Program Files\\LibreOffice\\program\\soffice.exe',\n        r'C:\\Program Files (x86)\\LibreOffice\\program\\soffice.exe',\n    ]\n    # \u4e5f\u652f\u6301\u4fbf\u643a\u7248/\u81ea\u5b9a\u4e49\u5b89\u88c5\uff1a\u5728\u5e38\u89c1\u76d8\u7b26\u641c\u4e00\u5c42\n    for drive in ['C:', 'D:', 'E:']:\n        p = Path(drive + r'\\LibreOffice\\program\\soffice.exe')\n        if p.exists():\n            candidates.insert(0, str(p))\n    for p in candidates:\n        if os.path.exists(p):\n            return p\n    # PATH \u4e2d\u67e5\u627e\n    w = shutil.which('soffice')\n    return w\n\ndef has_word():\n    try:\n        import win32com.client  # noqa\n        return True\n    except Exception:\n        return False\n\n# ========== \u8f6c\u6362\u51fd\u6570 ==========\ndef convert_doc_to_docx_with_soffice(soffice_path, doc_path):\n    outdir = os.path.dirname(doc_path)\n    print(f'\ud83d\udd04 LibreOffice \u8f6c\u6362: {doc_path}')\n    try:\n        subprocess.run(\n            [soffice_path, '--headless', '--convert-to', 'docx', '--outdir', outdir, doc_path],\n            check=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True\n        )\n        new_path = doc_path + 'x'  # xxx.doc -> xxx.docx\n        for _ in range(30):\n            if os.path.exists(new_path):\n                break\n            time.sleep(0.1)\n        if os.path.exists(new_path):\n            print(f'\u2705 \u8f6c\u6362\u6210\u529f: {new_path}')\n            return new_path\n        print(f'\u274c \u8f6c\u6362\u5931\u8d25: \u672a\u627e\u5230 {new_path}')\n    except subprocess.CalledProcessError as e:\n        print('\u274c LibreOffice \u8f6c\u6362\u51fa\u9519\uff1a')\n        print(e.stdout or str(e))\n    return None\n\ndef convert_doc_to_docx_with_word(doc_path):\n    print(f'\ud83d\udd04 Word \u8f6c\u6362: {doc_path}')\n    try:\n        import win32com.client as win32\n        word = win32.gencache.EnsureDispatch('Word.Application')\n        word.Visible = False\n        doc = None\n        new_path = doc_path + 'x'\n        try:\n            doc = word.Documents.Open(doc_path)\n            doc.SaveAs(new_path, FileFormat=16)  # 16 = wdFormatXMLDocument (.docx)\n        finally:\n            if doc is not None:\n                doc.Close(False)\n            word.Quit()\n        if os.path.exists(new_path):\n            print(f'\u2705 \u8f6c\u6362\u6210\u529f: {new_path}')\n            return new_path\n        else:\n            print(f'\u274c \u8f6c\u6362\u5931\u8d25: \u672a\u627e\u5230 {new_path}')\n    except Exception as e:\n        print(f'\u274c Word \u8f6c\u6362\u51fa\u9519: {e}')\n    return None\n\ndef convert_doc_to_docx(doc_path):\n    soffice = find_soffice_exe()\n    if soffice and os.path.exists(soffice):\n        p = convert_doc_to_docx_with_soffice(soffice, doc_path)\n        if p:\n            return p\n    if has_word():\n        p = convert_doc_to_docx_with_word(doc_path)\n        if p:\n            return p\n    print(f'\u26a0\ufe0f \u65e0\u6cd5\u8f6c\u6362\uff08\u7f3a\u5c11 LibreOffice \u6216 Word\uff09\uff1a{doc_path}')\n    return None\n\n# ========== \u5408\u5e76 ==========\ndef merge_docs(input_dir, output_file):\n    if not output_file.lower().endswith('.docx'):\n        base, _ = os.path.splitext(output_file)\n        output_file = base + '.docx'\n        print(f'\u2139\ufe0f \u8f93\u51fa\u5f3a\u5236\u4e3a .docx\uff1a{output_file}')\n\n    names = [f for f in os.listdir(input_dir)\n             if f.lower().endswith(('.doc', '.docx')) and not f.startswith('~$')]\n    names.sort()\n    if not names:\n        print('\u26a0\ufe0f \u76ee\u5f55\u4e2d\u6ca1\u6709 .doc / .docx \u6587\u4ef6\u3002", "top": 0, "createdAt": 1756895003, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-03", "dateLabelColor": "#0969da"}, "P34": {"htmlDir": "docs/post/GPT5--gui-gu-shi---wu-zhong-xiang.html", "labels": ["realfake.top"], "postTitle": "GPT5-\u9b3c\u6545\u4e8b-\u96fe\u949f\u5df7", "postUrl": "post/GPT5--gui-gu-shi---wu-zhong-xiang.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/34", "commentNum": 0, "wordCount": 6315, "description": "## \u4e00\n\n\u6797\u8fdc\u56de\u5230\u96fe\u949f\u5df7\u7684\u65f6\u5019\uff0c\u5929\u521a\u4e0b\u8fc7\u4e00\u9635\u7ec6\u96e8\u3002", "top": 0, "createdAt": 1756997412, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-04", "dateLabelColor": "#0969da"}, "P35": {"htmlDir": "docs/post/GPT5--wu-zhong-xiang---wu-ming-ri.html", "labels": ["realfake.top"], "postTitle": "GPT5-\u96fe\u949f\u5df7-\u65e0\u540d\u65e5", "postUrl": "post/GPT5--wu-zhong-xiang---wu-ming-ri.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/35", "commentNum": 0, "wordCount": 2998, "description": "\u6797\u8fdc\u62d6\u7740\u884c\u674e\u4ece\u5c0f\u7ad9\u51fa\u6765\u3002", "top": 0, "createdAt": 1757000075, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-04", "dateLabelColor": "#0969da"}, "P37": {"htmlDir": "docs/post/GPT5--wu-zhong-xiang---gui-tu.html", "labels": ["realfake.top"], "postTitle": "GPT5-\u96fe\u949f\u5df7-\u5f52\u9014", "postUrl": "post/GPT5--wu-zhong-xiang---gui-tu.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/37", "commentNum": 0, "wordCount": 2839, "description": "\u6797\u8fdc\u5728\u57ce\u5e02\u91cc\u4f4f\u5728\u4e00\u95f4\u4f4e\u77ee\u7684\u9694\u65ad\u623f\uff0c\u7a97\u5916\u662f\u4e00\u6761\u6c38\u8fdc\u6f6e\u7740\u6cb9\u70df\u7684\u80cc\u8857\u3002", "top": 0, "createdAt": 1757151280, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-06", "dateLabelColor": "#0969da"}, "P43": {"htmlDir": "docs/post/xia-zai-lian-jie.html", "labels": ["python"], "postTitle": "\u4e0b\u8f7d\u94fe\u63a5", "postUrl": "post/xia-zai-lian-jie.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/43", "commentNum": 0, "wordCount": 7478, "description": "## \u83b7\u53d6\u94fe\u63a5\n```\nconst links = document.getElementsByTagName('a');\n\n// \u904d\u5386\u6240\u6709\u94fe\u63a5\u5e76\u67e5\u627e\u5339\u914d Hugging Face blob \u5730\u5740\nfor (const link of links) {\n  const href = link.href;\n  // \u5339\u914d datasets \u4ed3\u5e93 blob \u94fe\u63a5\n  const urlRegex = /^https:\\/\\/huggingface\\.co\\/datasets\\/[^/]+\\/[^/]+\\/blob\\/[^/]+\\/.+$/;\n  if (urlRegex.test(href)) {\n    // \u66ff\u6362 blob \u2192 resolve\n    const realUrl = href.replace('/blob/', '/resolve/');\n    console.log('\u76f4\u94fe: ' + realUrl);\n  }\n}\n```\n\n## \u6267\u884c\u4e0b\u8f7d\n\n```\n# -*- coding: utf-8 -*-\n'''\nauto_paste_two_options.py\n\u4e24\u4e2a\u9009\u9879\uff1a\n1) \u5f00\u59cb\uff1a\u8fdb\u5165\u5750\u6807\u83b7\u53d6\u754c\u9762 \u2192 F5 \u4fdd\u5b58\u5750\u6807\u540e\u81ea\u52a8\u5f00\u59cb\u5faa\u73af\n0) \u9000\u51fa\n\n\u5faa\u73af\u903b\u8f91\uff1a\n- \u4ece TXT \u6bcf\u884c\u8bfb\u53d6\n- \u70b9\u51fb\u8f93\u5165\u6846 \u2192 \u7c98\u8d34 \u2192 \u56de\u8f66(\u6216\u70b9\u51fb\u6309\u94ae)\n- \u95f4\u9694 N \u79d2\u7ee7\u7eed\n'''\n\nimport os, sys, json, time, subprocess\n\n# ===== \u4f9d\u8d56\u81ea\u52a8\u5b89\u88c5 =====\ndef ensure_packages():\n    for p in ['pyautogui', 'keyboard', 'pyperclip']:\n        try:\n            __import__('pyautogui' if p=='pyautogui' else p)\n        except Exception:\n            print(f'[\u5b89\u88c5] \u7f3a\u5c11 {p}\uff0c\u6b63\u5728\u5b89\u88c5...')\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', p])\nensure_packages()\n\nimport pyautogui, keyboard, pyperclip\n\npyautogui.FAILSAFE = True\npyautogui.PAUSE = 0.03\n\nCONFIG_FILE = 'auto_paste_config.json'\nSTATE_FILE  = 'auto_paste_state.json'\n\n# ===== \u8fd9\u91cc\u6309\u9700\u6539\u9ed8\u8ba4\u503c =====\nDEFAULT_CONFIG = {\n    'txt_file': r'c:\\Users\\Puck\\Desktop\\sid.txt',   # \u2190 \u6539\u6210\u4f60\u7684 txt \u8def\u5f84\n    'coords': {'click_target': None, 'submit_btn': None},\n    'interval_sec': 180,                  # \u95f4\u9694\u79d2\uff083\u5206\u949f\uff09\n    'clear_before_paste': True,           # \u7c98\u8d34\u524d Ctrl+A \u6e05\u7a7a\n    'press_enter_after_paste': True       # True=\u56de\u8f66\u63d0\u4ea4\uff1bFalse=\u70b9\u51fb submit_btn\n}\n\n# ========== \u5de5\u5177\u51fd\u6570 ==========\ndef load_json(path, default=None):\n    if os.path.exists(path):\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                return json.load(f)\n        except Exception:\n            pass\n    return default\n\ndef save_json(path, data):\n    with open(path, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=2)\n\ndef get_conf():\n    conf = load_json(CONFIG_FILE, None)\n    if conf is None:\n        conf = DEFAULT_CONFIG.copy()\n        save_json(CONFIG_FILE, conf)\n    else:\n        # \u8865\u9f50\u5b57\u6bb5\n        for k, v in DEFAULT_CONFIG.items():\n            if k not in conf: conf[k] = v\n        if 'coords' not in conf or not isinstance(conf['coords'], dict):\n            conf['coords'] = {'click_target': None, 'submit_btn': None}\n        conf['coords'].setdefault('click_target', None)\n        conf['coords'].setdefault('submit_btn', None)\n        save_json(CONFIG_FILE, conf)\n    return conf\n\ndef click(xy):\n    if not xy: return\n    x, y = xy\n    pyautogui.moveTo(x, y, duration=0.05)\n    pyautogui.click()\n\ndef paste_text(text, clear_before=True):\n    if clear_before:\n        pyautogui.hotkey('ctrl', 'a'); time.sleep(0.05)\n    pyperclip.copy(text); time.sleep(0.05)\n    pyautogui.hotkey('ctrl', 'v')\n\ndef press_enter():\n    pyautogui.press('enter')\n\ndef human_time(sec):\n    m, s = divmod(int(sec), 60)\n    h, m = divmod(m, 60)\n    if h: return f'{h}\u5c0f\u65f6{m}\u5206{s}\u79d2'\n    if m: return f'{m}\u5206{s}\u79d2'\n    return f'{s}\u79d2'\n\ndef countdown(total_sec):\n    start = time.time()\n    paused = False\n    while True:\n        if keyboard.is_pressed('esc'):\n            print('\\n[\u9000\u51fa] ESC \u89e6\u53d1\uff0c\u7ed3\u675f\u5faa\u73af\u3002", "top": 0, "createdAt": 1757519887, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-10", "dateLabelColor": "#0969da"}, "P46": {"htmlDir": "docs/post/CentOS 7.6  SSH -fang-bao-li-po-jie.html", "labels": ["bash"], "postTitle": "CentOS 7.6  SSH \u9632\u66b4\u529b\u7834\u89e3", "postUrl": "post/CentOS%207.6%20%20SSH%20-fang-bao-li-po-jie.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/46", "commentNum": 0, "wordCount": 12350, "description": "#  \u666e\u901a\u8fde\u63a5\n\n```\nssh -p 22 root@192.168.1.1\n```\n\n#  \u5bc6\u94a5\u8fde\u63a5\n\n- https://github.com/settings/ssh/new\n\n```\nssh-keygen -t rsa -b 4096 -C '123@qq.com'\ntype C:\\.ssh\\id_rsa.pub\n\nssh -i <\u79c1\u94a5\u6587\u4ef6\u8def\u5f84> <\u7528\u6237\u540d>@<\u670d\u52a1\u5668IP>\n\nssh -T git@github.com\ngit@github.com:tcq20256/feeday.git\n```\n\n# \u5c01\u7981\u653b\u51fb\u7684IP\n\n```\n#!/usr/bin/env bash\n# setup_ssh_antibrute.sh\n# CentOS 7.6\uff1aFail2Ban SSH \u9632\u66b4\u529b\u7834\u89e3\uff08\u5b89\u88c5/\u914d\u7f6e + \u81ea\u6108\u4fee\u590d \u4e00\u4f53\u5316\uff09\n# - \u4ec5\u52a8 fail2ban\uff0c\u4e0d\u6539 sshd \u7aef\u53e3/\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u4e0d\u5f71\u54cd\u5176\u4ed6\u670d\u52a1\n# - firewalld \u5728\u8dd1\uff1afirewallcmd-ipset\uff08\u8fd0\u884c\u65f6\u89c4\u5219\uff0c\u975e\u6c38\u4e45\uff09\uff1b\u5426\u5219\u7528 iptables-multiport\n# - BAN/UNBAN \u5ba1\u8ba1\u65e5\u5fd7\u53ef\u81ea\u5b9a\u4e49\u8def\u5f84\uff08\u9ed8\u8ba4 /home/lighthouse/bash/ssh-ban.log\uff0c\u6216 BAN_LOG='__SCRIPT_DIR__'\uff09\n# - \u68c0\u6d4b\u5230 socket \u8fde\u63a5\u5931\u8d25\u4f1a\u81ea\u52a8\u6267\u884c\u4fee\u590d\u6d41\u7a0b\uff08\u6e05\u7406\u6b8b\u7559\u3001\u91cd\u5efa /run/fail2ban\u3001\u6062\u590d SELinux \u4e0a\u4e0b\u6587\u3001\u8865\u9f50 iptables\uff09\n\nset -euo pipefail\n\n### ===== \u53ef\u8c03\u53c2\u6570\uff08\u4e5f\u53ef\u7528\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff09=====\nBANTIME='${BANTIME:-3600}'     # \u88ab\u5c01\u65f6\u957f\uff08\u79d2\uff09\nFINDTIME='${FINDTIME:-600}'    # \u89c2\u5bdf\u7a97\u53e3\uff08\u79d2\uff09\nMAXRETRY='${MAXRETRY:-5}'      # \u5931\u8d25\u6b21\u6570\u9608\u503c\nMY_IP='${MY_IP:-}'             # \u53ef\u9009\uff1a\u4f60\u7684\u51fa\u53e3\u767d\u540d\u5355\uff0c\u5982 1.2.3.4\nDEFAULT_BAN_LOG='/home/lighthouse/bash/ssh-ban.log'\n\n# \u65e5\u5fd7\u4f4d\u7f6e\uff1a\u652f\u6301 BAN_LOG='__SCRIPT_DIR__'\nSCRIPT_DIR='$(cd -- '$(dirname -- '${BASH_SOURCE[0]}')' && pwd)'\nif [[ '${BAN_LOG:-}' == '__SCRIPT_DIR__' ]]; then\n  BAN_LOG='${SCRIPT_DIR}/ssh-ban.log'\nelse\n  BAN_LOG='${BAN_LOG:-$DEFAULT_BAN_LOG}'\nfi\n\n### ===== \u5c0f\u5de5\u5177 =====\nmsg(){ echo -e '\\033[1;32m[INFO]\\033[0m $*'; }\nwarn(){ echo -e '\\033[1;33m[WARN]\\033[0m $*'; }\nerr(){ echo -e '\\033[1;31m[ERR ]\\033[0m $*'; }\n\nrequire_root(){ [[ ${EUID:-$(id -u)} -eq 0 ]] || { err '\u8bf7\u7528 root \u8fd0\u884c\uff1asudo bash $0'; exit 1; }; }\nfile_put(){ # $1:path  $2:content\n  local p='$1'; shift\n  umask 022; cat >'$p' <<<'$*'\n  chmod 0644 '$p'\n}\n\n### ===== \u4fee\u590d\u6d41\u7a0b\uff1a\u6e05\u7406\u6b8b\u7559 / \u76ee\u5f55 / SELinux / \u7ec4\u4ef6 =====\nrepair_fail2ban(){\n  warn '\u89e6\u53d1\u81ea\u6108\u4fee\u590d\uff1a\u6e05\u7406\u6b8b\u7559\u5e76\u91cd\u5efa\u8fd0\u884c\u73af\u5883\u2026\u2026'\n  systemctl stop fail2ban || true\n  pkill -9 -f fail2ban-server || true\n\n  rm -rf /run/fail2ban /var/run/fail2ban\n  install -d -m 755 -o root -g root /run/fail2ban\n  ln -sfn /run/fail2ban /var/run/fail2ban\n\n  # SELinux\uff08\u82e5\u542f\u7528\u5219\u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u65e0\u526f\u4f5c\u7528\uff09\n  if command -v selinuxenabled >/dev/null 2>&1 && selinuxenabled; then\n    restorecon -Rv /run/fail2ban || true\n  fi\n\n  # \u7ec4\u4ef6\u515c\u5e95\uff1a\u5f53\u524d banaction \u53ef\u80fd\u7528\u5230 iptables\n  yum install -y -q iptables iptables-services || true\n\n  # \u786e\u4fdd fail2ban.conf \u4f7f\u7528\u6807\u51c6 socket \u8def\u5f84\uff08\u4ec5\u4fee\u6b63\u7f3a\u5931/\u5f02\u5e38\u60c5\u51b5\uff09\n  local conf='/etc/fail2ban/fail2ban.conf'\n  if [[ -f '$conf' ]]; then\n    grep -qE '^\\s*socket\\s*=\\s*/var/run/fail2ban/fail2ban\\.sock' '$conf' || \\\n      sed -ri 's|^\\s*socket\\s*=.*|socket = /var/run/fail2ban/fail2ban.sock|g' '$conf'\n    grep -qE '^\\s*pidfile\\s*=\\s*/var/run/fail2ban/fail2ban\\.pid' '$conf' || \\\n      sed -ri 's|^\\s*pidfile\\s*=.*|pidfile = /var/run/fail2ban/fail2ban.pid|g' '$conf'\n  fi\n\n  systemctl restart fail2ban\n  sleep 1\n}\n\n### ===== \u4e3b\u6d41\u7a0b =====\nrequire_root\n\n# 1) \u5b89\u88c5\u4f9d\u8d56\nif ! rpm -qa | grep -qiE '^epel-release'; then\n  msg '\u5b89\u88c5 epel-release ...'\n  yum install -y epel-release\nfi\nif ! rpm -qa | grep -qiE '^fail2ban(-server)?'; then\n  msg '\u5b89\u88c5 fail2ban ...'\n  yum install -y fail2ban\nelse\n  msg 'fail2ban \u5df2\u5b89\u88c5'\nfi\n\n# 2) \u68c0\u6d4b firewalld\nFIREWALLD_ACTIVE=0\nif systemctl is-active firewalld >/dev/null 2>&1; then\n  FIREWALLD_ACTIVE=1\n  msg 'firewalld \u8fd0\u884c\u4e2d\uff1abanaction=firewallcmd-ipset\uff08\u8fd0\u884c\u65f6\u89c4\u5219\uff0c\u975e\u6c38\u4e45\uff09'\nelse\n  warn 'firewalld \u672a\u8fd0\u884c\uff1abanaction=iptables-multiport'\nfi\nBANACTION='iptables-multiport'\n[[ $FIREWALLD_ACTIVE -eq 1 ]] && BANACTION='firewallcmd-ipset'\n\n# 3) \u81ea\u5b9a\u4e49\u52a8\u4f5c\uff1alog-ban\uff08\u6b63\u786e\u4f7f\u7528 <name>/<ip>/<port>/<failures>\uff1bprintf \u7528 %%s\uff1bdate \u7528 %%F %%T\uff09\nfile_put /etc/fail2ban/action.d/log-ban.local \\\n'[Definition]\nactionban   = /bin/sh -c '\\''printf '%%s\\tBAN\\tjail=<name>\\tip=<ip>\\tport=<port>\\tfailures=<failures>\\tsrc=%(src)s\\n' '$(date '+%%F %%T')' >> %(logfile)s'\\''\nactionunban = /bin/sh -c '\\''printf '%%s\\tUNBAN\\tjail=<name>\\tip=<ip>\\n' '$(date '+%%F %%T')' >> %(logfile)s'\\'''\nchmod 0644 /etc/fail2ban/action.d/log-ban.local\n\n# 4) \u751f\u6210 jail.local\uff08\u4ec5\u5f00\u542f sshd \u76d1\u72f1\uff09\nJAIL_LOCAL='/etc/fail2ban/jail.local'\nif [[ -f '$JAIL_LOCAL' ]]; then\n  cp -a '$JAIL_LOCAL' '${JAIL_LOCAL}.bak.$(date +%Y%m%d-%H%M%S)'\n  msg '\u5df2\u5907\u4efd\u539f\u914d\u7f6e\uff1a${JAIL_LOCAL}.bak.*'\nfi\nIGNOREIP='127.0.0.1/8'\n[[ -n '$MY_IP' ]] && IGNOREIP='$IGNOREIP $MY_IP'\nfile_put '$JAIL_LOCAL' \\\n'[DEFAULT]\nbantime   = ${BANTIME}\nfindtime  = ${FINDTIME}\nmaxretry  = ${MAXRETRY}\nbackend   = auto\nignoreip  = ${IGNOREIP}\nbanaction = ${BANACTION}\n\n[sshd]\nenabled  = true\nport     = ssh\nfilter   = sshd\nlogpath  = /var/log/secure\naction   = %(action_)s\n           log-ban[logfile=${BAN_LOG}, src=/var/log/secure]\n'\nchmod 0644 '$JAIL_LOCAL'\n\n# 5) \u65e5\u5fd7\u4e0e logrotate\nmkdir -p '$(dirname -- '$BAN_LOG')'\ntouch '$BAN_LOG'\nchmod 0640 '$BAN_LOG'\nchown root:root '$BAN_LOG'\nfile_put /etc/logrotate.d/ssh-ban \\\n'${BAN_LOG} {\n    daily\n    rotate 14\n    missingok\n    notifempty\n    compress\n    create 0640 root root\n}\n'\n\n# 6) \u515c\u5e95\u8fd0\u884c\u76ee\u5f55\ninstall -d -m 755 -o root -g root /run/fail2ban\nln -sfn /run/fail2ban /var/run/fail2ban\n\n# 7) \u8bed\u6cd5\u6d4b\u8bd5 & \u542f\u52a8\nmsg '\u6821\u9a8c fail2ban \u914d\u7f6e\u8bed\u6cd5 ...'\nif ! fail2ban-client -t; then\n  err '\u914d\u7f6e\u8bed\u6cd5\u6821\u9a8c\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u4e0a\u65b9\u8f93\u51fa\u3002", "top": 0, "createdAt": 1757736553, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-13", "dateLabelColor": "#0969da"}, "P47": {"htmlDir": "docs/post/Gitea -guan-li-jiao-ben.html", "labels": ["bash"], "postTitle": "Gitea \u7ba1\u7406\u811a\u672c", "postUrl": "post/Gitea%20-guan-li-jiao-ben.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/47", "commentNum": 0, "wordCount": 2126, "description": "# \u90e8\u7f72 Gitea\n```\n#!/bin/bash\n# Gitea \u7ba1\u7406\u811a\u672c\uff1a\u5b89\u88c5\u524d\u5148\u5378\u8f7d\u65e7\u7684\nset -e\n\nGITEA_VERSION='1.22.3'                          # \u8981\u5b89\u88c5\u7684\u7248\u672c\nGITEA_BIN='/usr/local/bin/gitea'\nGITEA_USER='git'\nGITEA_HOME='/var/lib/gitea'\nGITEA_CONF='/etc/gitea'\nSERVICE_FILE='/etc/systemd/system/gitea.service'\n\nuninstall_gitea() {\n    echo '\u26a0\ufe0f \u5378\u8f7d\u65e7\u7248 Gitea ...'\n    systemctl stop gitea >/dev/null 2>&1 || true\n    systemctl disable gitea >/dev/null 2>&1 || true\n    rm -f $SERVICE_FILE\n    rm -f $GITEA_BIN\n    systemctl daemon-reload\n    echo '\u2705 \u5378\u8f7d\u5b8c\u6210\uff08\u6570\u636e\u76ee\u5f55 $GITEA_HOME \u548c\u914d\u7f6e $GITEA_CONF \u4fdd\u7559\uff09'\n}\n\ninstall_gitea() {\n    echo '\ud83d\udce5 \u5f00\u59cb\u5b89\u88c5 Gitea v${GITEA_VERSION} ...'\n    # \u5378\u8f7d\u65e7\u7248\u672c\n    uninstall_gitea\n\n    # \u521b\u5efa\u7528\u6237\u548c\u76ee\u5f55\n    id -u $GITEA_USER &>/dev/null || useradd -r -m -d $GITEA_HOME -s /bin/bash $GITEA_USER\n    mkdir -p $GITEA_HOME/{custom,data,log} $GITEA_CONF\n    chown -R $GITEA_USER:$GITEA_USER $GITEA_HOME $GITEA_CONF\n\n    # \u4e0b\u8f7d\u4e8c\u8fdb\u5236\n    wget -O $GITEA_BIN 'https://dl.gitea.com/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-amd64'\n    chmod +x $GITEA_BIN\n\n    # \u5199 systemd \u670d\u52a1\n    cat > $SERVICE_FILE <<EOF\n[Unit]\nDescription=Gitea\nAfter=syslog.target\nAfter=network.target\nRequires=network.target\n\n[Service]\nRestartSec=2s\nType=simple\nUser=$GITEA_USER\nGroup=$GITEA_USER\nWorkingDirectory=$GITEA_HOME\nExecStart=$GITEA_BIN web --config $GITEA_CONF/app.ini\nRestart=always\nEnvironment=USER=$GITEA_USER HOME=$GITEA_HOME GITEA_WORK_DIR=$GITEA_HOME\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    systemctl daemon-reload\n    systemctl enable gitea\n    systemctl start gitea\n    echo '\u2705 \u5b89\u88c5\u5b8c\u6210\uff01\u8bbf\u95ee http://\u4f60\u7684IP:3000 \u521d\u59cb\u5316'\n}\n\nrestart_gitea() {\n    echo '\ud83d\udd04 \u6b63\u5728\u91cd\u542f Gitea ...'\n    systemctl restart gitea\n    echo '\u2705 \u5df2\u91cd\u542f'\n}\n\nstop_gitea() {\n    echo '\u23f9\ufe0f \u6b63\u5728\u505c\u6b62 Gitea ...'\n    systemctl stop gitea\n    echo '\u2705 \u5df2\u505c\u6b62'\n}\n\nmenu() {\n    echo '===== Gitea \u7ba1\u7406 ====='\n    echo '1) \u5b89\u88c5\u6700\u65b0 Gitea\uff08\u4f1a\u81ea\u52a8\u5378\u8f7d\u65e7\u7248\uff09'\n    echo '2) \u5378\u8f7d Gitea'\n    echo '3) \u91cd\u542f Gitea'\n    echo '4) \u505c\u6b62 Gitea'\n    echo '======================'\n    read -p '\u8bf7\u9009\u62e9\u64cd\u4f5c: ' choice\n\n    case $choice in\n        1) install_gitea ;;\n        2) uninstall_gitea ;;\n        3) restart_gitea ;;\n        4) stop_gitea ;;\n        *) echo '\u65e0\u6548\u9009\u62e9' ;;\n    esac\n}\n\nmenu\n```\u3002", "top": 0, "createdAt": 1757741370, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-13", "dateLabelColor": "#0969da"}, "P56": {"htmlDir": "docs/post/srt -qie-shi-pin-yin-pin.html", "labels": ["python"], "postTitle": "srt \u5207\u89c6\u9891\u97f3\u9891", "postUrl": "post/srt%20-qie-shi-pin-yin-pin.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/56", "commentNum": 0, "wordCount": 3107, "description": "## \u6309\u5b57\u5e55\u5207\u5272\u97f3\u9891\u89c6\u9891\n```\n# -*- coding: utf-8 -*-\n'''\ncut_by_srt_auto.py\n- \u81ea\u52a8 pip \u5b89\u88c5\u4f9d\u8d56 (srt, chardet, tqdm)\n- \u81ea\u52a8\u5339\u914d\u7f6e\u9876\u6587\u4ef6\u5939\u91cc\u7684\u5a92\u4f53\u6587\u4ef6 (mp4/mp3/wav/mkv\u7b49)\n- \u627e\u5230\u5bf9\u5e94\u540c\u540d .srt \u6587\u4ef6\n- \u6309\u5b57\u5e55\u65f6\u95f4\u5207\u7247\uff0c\u5e76\u8f93\u51fa\u5230 \u3010\u539f\u6587\u4ef6\u540d_clips\u3011\u6587\u4ef6\u5939\n'''\n\nimport os\nimport sys\nimport subprocess\nimport importlib.util\nfrom pathlib import Path\nimport re\nfrom datetime import timedelta\n\n# ==== \u81ea\u52a8\u5b89\u88c5\u4f9d\u8d56 ====\ndef pip_install(package):\n    try:\n        __import__(package)\n    except ImportError:\n        print(f'[INFO] \u5b89\u88c5\u4f9d\u8d56: {package}')\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n\nfor pkg in ['srt', 'chardet', 'tqdm']:\n    pip_install(pkg)\n\nimport srt\nimport chardet\nfrom tqdm import tqdm\n\n# ==== \u5de5\u5177\u51fd\u6570 ====\ndef detect_encoding(p):\n    raw = Path(p).read_bytes()\n    enc = chardet.detect(raw).get('encoding') or 'utf-8'\n    try:\n        raw.decode(enc)\n    except Exception:\n        enc = 'utf-8'\n    return enc\n\ndef td2ss(t: timedelta):\n    return t.total_seconds()\n\ndef ss2tc(seconds: float):\n    ms = int(round(seconds * 1000))\n    h = ms // 3600000\n    m = (ms % 3600000) // 60000\n    s = (ms % 60000) // 1000\n    ms = ms % 1000\n    return f'{h:02d}:{m:02d}:{s:02d}.{ms:03d}'\n\ndef safe_name(text, keep=30):\n    text = re.sub(r'[\\\\/:*?\\'<>|]', '_', text.strip())\n    text = re.sub(r'\\s+', ' ', text)\n    return text[:keep] if text else 'clip'\n\n# ==== \u4e3b\u903b\u8f91 ====\ndef main():\n    base = Path(__file__).parent  # \u5f53\u524d\u811a\u672c\u6240\u5728\u76ee\u5f55\uff08\u7f6e\u9876\u6587\u4ef6\u5939\uff09\n    # \u627e\u5a92\u4f53\u6587\u4ef6\n    media_files = list(base.glob('*.mp4')) + list(base.glob('*.mkv')) + list(base.glob('*.mp3')) + list(base.glob('*.wav'))\n    if not media_files:\n        print('[ERROR] \u6ca1\u627e\u5230\u5a92\u4f53\u6587\u4ef6\uff08\u652f\u6301 mp4/mkv/mp3/wav\uff09')\n        return\n    media = media_files[0]  # \u9ed8\u8ba4\u53d6\u7b2c\u4e00\u4e2a\n    print(f'[INFO] \u4f7f\u7528\u5a92\u4f53\u6587\u4ef6: {media}')\n\n    # \u627e srt \u6587\u4ef6\uff08\u540c\u540d\uff09\n    srt_file = media.with_suffix('.srt')\n    if not srt_file.exists():\n        print(f'[ERROR] \u6ca1\u627e\u5230\u5bf9\u5e94\u5b57\u5e55\u6587\u4ef6: {srt_file}')\n        return\n    print(f'[INFO] \u4f7f\u7528\u5b57\u5e55\u6587\u4ef6: {srt_file}')\n\n    # \u8f93\u51fa\u76ee\u5f55\n    outdir = base / f'{media.stem}_clips'\n    outdir.mkdir(exist_ok=True)\n\n    # \u8bfb\u53d6\u5b57\u5e55\n    enc = detect_encoding(srt_file)\n    text = srt_file.read_text(encoding=enc, errors='ignore')\n    subs = list(srt.parse(text))\n\n    total = 0\n    for i, sub in enumerate(tqdm(subs, desc='Cutting', unit='seg'), start=1):\n        start_s = td2ss(sub.start)\n        end_s = td2ss(sub.end)\n\n        ss = ss2tc(start_s)\n        to = ss2tc(end_s)\n\n        snippet = sub.content.replace('\\n', ' ').strip()\n        name_text = safe_name(snippet, keep=20)\n\n        ext = '.mp4' if media.suffix.lower() in ['.mp4', '.mkv'] else '.m4a'\n        out_path = outdir / f'{i:03d}_{name_text}{ext}'\n\n        cmd = [\n            'ffmpeg', '-y', '-hide_banner', '-loglevel', 'error',\n            '-ss', ss, '-to', to, '-i', str(media),\n            '-c:v', 'libx264', '-preset', 'veryfast', '-crf', '23',\n            '-c:a', 'aac', '-b:a', '128k',\n            str(out_path)\n        ]\n        try:\n            subprocess.run(cmd, check=True)\n            total += 1\n        except subprocess.CalledProcessError:\n            print(f'[WARN] \u7b2c {i} \u6bb5\u5bfc\u51fa\u5931\u8d25')\n\n    print(f'[\u5b8c\u6210] \u5171\u5bfc\u51fa {total} \u6bb5 -> {outdir}')\n\nif __name__ == '__main__':\n    main()\n```\u3002", "top": 0, "createdAt": 1758451592, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-21", "dateLabelColor": "#0969da"}, "P57": {"htmlDir": "docs/post/wu-zhong-xiang-\u00b7-die-meng-\uff5c-zhan-wei-gao- 2025-09-21.html", "labels": ["auto", "draft", "novel"], "postTitle": "\u96fe\u949f\u5df7\u00b7\u8776\u68a6\uff5c\u5360\u4f4d\u7a3f 2025-09-21", "postUrl": "post/wu-zhong-xiang-%C2%B7-die-meng-%EF%BD%9C-zhan-wei-gao-%202025-09-21.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/57", "commentNum": 0, "wordCount": 187, "description": "> \u8fd9\u662f\u81ea\u52a8\u5199\u4f5c\u5360\u4f4d\u7a3f\uff08\u65e0 API \u7248\uff09\uff0c\u7528\u4e8e\u9a8c\u8bc1\u201c\u81ea\u52a8\u521b\u5efa Issue \u2192 \u53d1\u5e03\u7ad9\u70b9\u201d\u7684\u6d41\u6c34\u7ebf\u3002", "top": 0, "createdAt": 1758463570, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-21", "dateLabelColor": "#0969da"}, "P58": {"htmlDir": "docs/post/wu-zhong-xiang-\u00b7-die-meng-\uff5c-zhan-wei-gao- 2025-09-22.html", "labels": ["auto", "draft", "novel"], "postTitle": "\u96fe\u949f\u5df7\u00b7\u8776\u68a6\uff5c\u5360\u4f4d\u7a3f 2025-09-22", "postUrl": "post/wu-zhong-xiang-%C2%B7-die-meng-%EF%BD%9C-zhan-wei-gao-%202025-09-22.html", "postSourceUrl": "https://github.com/tcq20256/feeday/issues/58", "commentNum": 0, "wordCount": 187, "description": "> \u8fd9\u662f\u81ea\u52a8\u5199\u4f5c\u5360\u4f4d\u7a3f\uff08\u65e0 API \u7248\uff09\uff0c\u7528\u4e8e\u9a8c\u8bc1\u201c\u81ea\u52a8\u521b\u5efa Issue \u2192 \u53d1\u5e03\u7ad9\u70b9\u201d\u7684\u6d41\u6c34\u7ebf\u3002", "top": 0, "createdAt": 1758550081, "style": "", "script": "<script src='/gmeek/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-09-22", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"auto": "#ededed", "bash": "#aaaaaa", "blog": "#aaaaaa", "bug": "#d73a4a", "documentation": "#0075ca", "draft": "#ededed", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "flask": "#aaaaaa", "good first issue": "#7057ff", "help wanted": "#008672", "html": "#aaaaaa", "invalid": "#e4e669", "novel": "#ededed", "python": "#aaaaaa", "question": "#d876e3", "realfake.top": "#aaaaaa", "wontfix": "#ffffff"}, "displayTitle": "feeday", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "prevUrl": "/page2.html", "nextUrl": "disabled"}